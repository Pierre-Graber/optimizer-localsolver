// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localsolver_result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_localsolver_5fresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_localsolver_5fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_localsolver_5fresult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_localsolver_5fresult_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_localsolver_5fresult_2eproto;
namespace localsolver_result {
class Activity;
class ActivityDefaultTypeInternal;
extern ActivityDefaultTypeInternal _Activity_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class Route;
class RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
}  // namespace localsolver_result
PROTOBUF_NAMESPACE_OPEN
template<> ::localsolver_result::Activity* Arena::CreateMaybeMessage<::localsolver_result::Activity>(Arena*);
template<> ::localsolver_result::Result* Arena::CreateMaybeMessage<::localsolver_result::Result>(Arena*);
template<> ::localsolver_result::Route* Arena::CreateMaybeMessage<::localsolver_result::Route>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace localsolver_result {

// ===================================================================

class Activity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_result.Activity) */ {
 public:
  inline Activity() : Activity(nullptr) {};
  virtual ~Activity();

  Activity(const Activity& from);
  Activity(Activity&& from) noexcept
    : Activity() {
    *this = ::std::move(from);
  }

  inline Activity& operator=(const Activity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Activity& operator=(Activity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Activity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Activity* internal_default_instance() {
    return reinterpret_cast<const Activity*>(
               &_Activity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Activity& a, Activity& b) {
    a.Swap(&b);
  }
  inline void Swap(Activity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Activity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Activity* New() const final {
    return CreateMaybeMessage<Activity>(nullptr);
  }

  Activity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Activity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Activity& from);
  void MergeFrom(const Activity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Activity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_result.Activity";
  }
  protected:
  explicit Activity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fresult_2eproto);
    return ::descriptor_table_localsolver_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantitiesFieldNumber = 2,
    kTypeFieldNumber = 4,
    kIndexFieldNumber = 1,
    kStartTimeFieldNumber = 3,
  };
  // repeated int32 quantities = 2;
  int quantities_size() const;
  private:
  int _internal_quantities_size() const;
  public:
  void clear_quantities();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quantities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_quantities() const;
  void _internal_add_quantities(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_quantities();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 quantities(int index) const;
  void set_quantities(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_quantities(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      quantities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_quantities();

  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_time = 3;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:localsolver_result.Activity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > quantities_;
  mutable std::atomic<int> _quantities_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fresult_2eproto;
};
// -------------------------------------------------------------------

class Route PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_result.Route) */ {
 public:
  inline Route() : Route(nullptr) {};
  virtual ~Route();

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Route& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Route* New() const final {
    return CreateMaybeMessage<Route>(nullptr);
  }

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_result.Route";
  }
  protected:
  explicit Route(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fresult_2eproto);
    return ::descriptor_table_localsolver_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivitiesFieldNumber = 1,
  };
  // repeated .localsolver_result.Activity activities = 1;
  int activities_size() const;
  private:
  int _internal_activities_size() const;
  public:
  void clear_activities();
  ::localsolver_result::Activity* mutable_activities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_result::Activity >*
      mutable_activities();
  private:
  const ::localsolver_result::Activity& _internal_activities(int index) const;
  ::localsolver_result::Activity* _internal_add_activities();
  public:
  const ::localsolver_result::Activity& activities(int index) const;
  ::localsolver_result::Activity* add_activities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_result::Activity >&
      activities() const;

  // @@protoc_insertion_point(class_scope:localsolver_result.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_result::Activity > activities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fresult_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_result.Result) */ {
 public:
  inline Result() : Result(nullptr) {};
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_result.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fresult_2eproto);
    return ::descriptor_table_localsolver_5fresult_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 4,
    kCostFieldNumber = 1,
    kDurationFieldNumber = 2,
    kIterationsFieldNumber = 3,
  };
  // repeated .localsolver_result.Route routes = 4;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::localsolver_result::Route* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_result::Route >*
      mutable_routes();
  private:
  const ::localsolver_result::Route& _internal_routes(int index) const;
  ::localsolver_result::Route* _internal_add_routes();
  public:
  const ::localsolver_result::Route& routes(int index) const;
  ::localsolver_result::Route* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_result::Route >&
      routes() const;

  // int64 cost = 1;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int64 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float duration = 2;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // int32 iterations = 3;
  void clear_iterations();
  ::PROTOBUF_NAMESPACE_ID::int32 iterations() const;
  void set_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iterations() const;
  void _internal_set_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:localsolver_result.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_result::Route > routes_;
  ::PROTOBUF_NAMESPACE_ID::int64 cost_;
  float duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 iterations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Activity

// int32 index = 1;
inline void Activity::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::index() const {
  // @@protoc_insertion_point(field_get:localsolver_result.Activity.index)
  return _internal_index();
}
inline void Activity::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void Activity::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:localsolver_result.Activity.index)
}

// repeated int32 quantities = 2;
inline int Activity::_internal_quantities_size() const {
  return quantities_.size();
}
inline int Activity::quantities_size() const {
  return _internal_quantities_size();
}
inline void Activity::clear_quantities() {
  quantities_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::_internal_quantities(int index) const {
  return quantities_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::quantities(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_result.Activity.quantities)
  return _internal_quantities(index);
}
inline void Activity::set_quantities(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  quantities_.Set(index, value);
  // @@protoc_insertion_point(field_set:localsolver_result.Activity.quantities)
}
inline void Activity::_internal_add_quantities(::PROTOBUF_NAMESPACE_ID::int32 value) {
  quantities_.Add(value);
}
inline void Activity::add_quantities(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_quantities(value);
  // @@protoc_insertion_point(field_add:localsolver_result.Activity.quantities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Activity::_internal_quantities() const {
  return quantities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Activity::quantities() const {
  // @@protoc_insertion_point(field_list:localsolver_result.Activity.quantities)
  return _internal_quantities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Activity::_internal_mutable_quantities() {
  return &quantities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Activity::mutable_quantities() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_result.Activity.quantities)
  return _internal_mutable_quantities();
}

// int32 start_time = 3;
inline void Activity::clear_start_time() {
  start_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Activity::start_time() const {
  // @@protoc_insertion_point(field_get:localsolver_result.Activity.start_time)
  return _internal_start_time();
}
inline void Activity::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_time_ = value;
}
inline void Activity::set_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:localsolver_result.Activity.start_time)
}

// string type = 4;
inline void Activity::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Activity::type() const {
  // @@protoc_insertion_point(field_get:localsolver_result.Activity.type)
  return _internal_type();
}
inline void Activity::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:localsolver_result.Activity.type)
}
inline std::string* Activity::mutable_type() {
  // @@protoc_insertion_point(field_mutable:localsolver_result.Activity.type)
  return _internal_mutable_type();
}
inline const std::string& Activity::_internal_type() const {
  return type_.Get();
}
inline void Activity::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Activity::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:localsolver_result.Activity.type)
}
inline void Activity::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:localsolver_result.Activity.type)
}
inline void Activity::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:localsolver_result.Activity.type)
}
inline std::string* Activity::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Activity::release_type() {
  // @@protoc_insertion_point(field_release:localsolver_result.Activity.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Activity::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:localsolver_result.Activity.type)
}
inline std::string* Activity::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:localsolver_result.Activity.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Activity::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localsolver_result.Activity.type)
}

// -------------------------------------------------------------------

// Route

// repeated .localsolver_result.Activity activities = 1;
inline int Route::_internal_activities_size() const {
  return activities_.size();
}
inline int Route::activities_size() const {
  return _internal_activities_size();
}
inline void Route::clear_activities() {
  activities_.Clear();
}
inline ::localsolver_result::Activity* Route::mutable_activities(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_result.Route.activities)
  return activities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_result::Activity >*
Route::mutable_activities() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_result.Route.activities)
  return &activities_;
}
inline const ::localsolver_result::Activity& Route::_internal_activities(int index) const {
  return activities_.Get(index);
}
inline const ::localsolver_result::Activity& Route::activities(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_result.Route.activities)
  return _internal_activities(index);
}
inline ::localsolver_result::Activity* Route::_internal_add_activities() {
  return activities_.Add();
}
inline ::localsolver_result::Activity* Route::add_activities() {
  // @@protoc_insertion_point(field_add:localsolver_result.Route.activities)
  return _internal_add_activities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_result::Activity >&
Route::activities() const {
  // @@protoc_insertion_point(field_list:localsolver_result.Route.activities)
  return activities_;
}

// -------------------------------------------------------------------

// Result

// int64 cost = 1;
inline void Result::clear_cost() {
  cost_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Result::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Result::cost() const {
  // @@protoc_insertion_point(field_get:localsolver_result.Result.cost)
  return _internal_cost();
}
inline void Result::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cost_ = value;
}
inline void Result::set_cost(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:localsolver_result.Result.cost)
}

// float duration = 2;
inline void Result::clear_duration() {
  duration_ = 0;
}
inline float Result::_internal_duration() const {
  return duration_;
}
inline float Result::duration() const {
  // @@protoc_insertion_point(field_get:localsolver_result.Result.duration)
  return _internal_duration();
}
inline void Result::_internal_set_duration(float value) {
  
  duration_ = value;
}
inline void Result::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:localsolver_result.Result.duration)
}

// int32 iterations = 3;
inline void Result::clear_iterations() {
  iterations_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::_internal_iterations() const {
  return iterations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::iterations() const {
  // @@protoc_insertion_point(field_get:localsolver_result.Result.iterations)
  return _internal_iterations();
}
inline void Result::_internal_set_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iterations_ = value;
}
inline void Result::set_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iterations(value);
  // @@protoc_insertion_point(field_set:localsolver_result.Result.iterations)
}

// repeated .localsolver_result.Route routes = 4;
inline int Result::_internal_routes_size() const {
  return routes_.size();
}
inline int Result::routes_size() const {
  return _internal_routes_size();
}
inline void Result::clear_routes() {
  routes_.Clear();
}
inline ::localsolver_result::Route* Result::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_result.Result.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_result::Route >*
Result::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_result.Result.routes)
  return &routes_;
}
inline const ::localsolver_result::Route& Result::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::localsolver_result::Route& Result::routes(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_result.Result.routes)
  return _internal_routes(index);
}
inline ::localsolver_result::Route* Result::_internal_add_routes() {
  return routes_.Add();
}
inline ::localsolver_result::Route* Result::add_routes() {
  // @@protoc_insertion_point(field_add:localsolver_result.Result.routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_result::Route >&
Result::routes() const {
  // @@protoc_insertion_point(field_list:localsolver_result.Result.routes)
  return routes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace localsolver_result

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_localsolver_5fresult_2eproto
