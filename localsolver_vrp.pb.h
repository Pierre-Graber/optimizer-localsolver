// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localsolver_vrp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_localsolver_5fvrp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_localsolver_5fvrp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_localsolver_5fvrp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_localsolver_5fvrp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_localsolver_5fvrp_2eproto;
namespace localsolver_vrp {
class Capacity;
class CapacityDefaultTypeInternal;
extern CapacityDefaultTypeInternal _Capacity_default_instance_;
class Matrix;
class MatrixDefaultTypeInternal;
extern MatrixDefaultTypeInternal _Matrix_default_instance_;
class Problem;
class ProblemDefaultTypeInternal;
extern ProblemDefaultTypeInternal _Problem_default_instance_;
class Relation;
class RelationDefaultTypeInternal;
extern RelationDefaultTypeInternal _Relation_default_instance_;
class Rest;
class RestDefaultTypeInternal;
extern RestDefaultTypeInternal _Rest_default_instance_;
class Route;
class RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class Service;
class ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
class TimeWindow;
class TimeWindowDefaultTypeInternal;
extern TimeWindowDefaultTypeInternal _TimeWindow_default_instance_;
class Vehicle;
class VehicleDefaultTypeInternal;
extern VehicleDefaultTypeInternal _Vehicle_default_instance_;
}  // namespace localsolver_vrp
PROTOBUF_NAMESPACE_OPEN
template<> ::localsolver_vrp::Capacity* Arena::CreateMaybeMessage<::localsolver_vrp::Capacity>(Arena*);
template<> ::localsolver_vrp::Matrix* Arena::CreateMaybeMessage<::localsolver_vrp::Matrix>(Arena*);
template<> ::localsolver_vrp::Problem* Arena::CreateMaybeMessage<::localsolver_vrp::Problem>(Arena*);
template<> ::localsolver_vrp::Relation* Arena::CreateMaybeMessage<::localsolver_vrp::Relation>(Arena*);
template<> ::localsolver_vrp::Rest* Arena::CreateMaybeMessage<::localsolver_vrp::Rest>(Arena*);
template<> ::localsolver_vrp::Route* Arena::CreateMaybeMessage<::localsolver_vrp::Route>(Arena*);
template<> ::localsolver_vrp::Service* Arena::CreateMaybeMessage<::localsolver_vrp::Service>(Arena*);
template<> ::localsolver_vrp::TimeWindow* Arena::CreateMaybeMessage<::localsolver_vrp::TimeWindow>(Arena*);
template<> ::localsolver_vrp::Vehicle* Arena::CreateMaybeMessage<::localsolver_vrp::Vehicle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace localsolver_vrp {

// ===================================================================

class Matrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_vrp.Matrix) */ {
 public:
  inline Matrix() : Matrix(nullptr) {};
  virtual ~Matrix();

  Matrix(const Matrix& from);
  Matrix(Matrix&& from) noexcept
    : Matrix() {
    *this = ::std::move(from);
  }

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix& operator=(Matrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Matrix* internal_default_instance() {
    return reinterpret_cast<const Matrix*>(
               &_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Matrix& a, Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix* New() const final {
    return CreateMaybeMessage<Matrix>(nullptr);
  }

  Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix& from);
  void MergeFrom(const Matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_vrp.Matrix";
  }
  protected:
  explicit Matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fvrp_2eproto);
    return ::descriptor_table_localsolver_5fvrp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kDistanceFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // repeated float time = 2 [packed = true];
  int time_size() const;
  private:
  int _internal_time_size() const;
  public:
  void clear_time();
  private:
  float _internal_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_time() const;
  void _internal_add_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_time();
  public:
  float time(int index) const;
  void set_time(int index, float value);
  void add_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_time();

  // repeated float distance = 3 [packed = true];
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  private:
  float _internal_distance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_distance() const;
  void _internal_add_distance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_distance();
  public:
  float distance(int index) const;
  void set_distance(int index, float value);
  void add_distance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      distance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_distance();

  // repeated float value = 4 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:localsolver_vrp.Matrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > time_;
  mutable std::atomic<int> _time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > distance_;
  mutable std::atomic<int> _distance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fvrp_2eproto;
};
// -------------------------------------------------------------------

class TimeWindow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_vrp.TimeWindow) */ {
 public:
  inline TimeWindow() : TimeWindow(nullptr) {};
  virtual ~TimeWindow();

  TimeWindow(const TimeWindow& from);
  TimeWindow(TimeWindow&& from) noexcept
    : TimeWindow() {
    *this = ::std::move(from);
  }

  inline TimeWindow& operator=(const TimeWindow& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeWindow& operator=(TimeWindow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeWindow* internal_default_instance() {
    return reinterpret_cast<const TimeWindow*>(
               &_TimeWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeWindow& a, TimeWindow& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeWindow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeWindow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeWindow* New() const final {
    return CreateMaybeMessage<TimeWindow>(nullptr);
  }

  TimeWindow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeWindow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeWindow& from);
  void MergeFrom(const TimeWindow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeWindow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_vrp.TimeWindow";
  }
  protected:
  explicit TimeWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fvrp_2eproto);
    return ::descriptor_table_localsolver_5fvrp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kMaximumLatenessFieldNumber = 3,
  };
  // uint32 start = 1;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 end = 2;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maximum_lateness = 3;
  void clear_maximum_lateness();
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_lateness() const;
  void set_maximum_lateness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maximum_lateness() const;
  void _internal_set_maximum_lateness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:localsolver_vrp.TimeWindow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_lateness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fvrp_2eproto;
};
// -------------------------------------------------------------------

class Service PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_vrp.Service) */ {
 public:
  inline Service() : Service(nullptr) {};
  virtual ~Service();

  Service(const Service& from);
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline Service& operator=(Service&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Service& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }
  inline void Swap(Service* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Service* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Service* New() const final {
    return CreateMaybeMessage<Service>(nullptr);
  }

  Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Service>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_vrp.Service";
  }
  protected:
  explicit Service(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fvrp_2eproto);
    return ::descriptor_table_localsolver_5fvrp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeWindowsFieldNumber = 1,
    kQuantitiesFieldNumber = 2,
    kVehicleIndicesFieldNumber = 5,
    kSetupQuantitiesFieldNumber = 11,
    kRefillQuantitiesFieldNumber = 14,
    kIdFieldNumber = 9,
    kDurationFieldNumber = 3,
    kPriorityFieldNumber = 4,
    kMatrixIndexFieldNumber = 6,
    kSetupDurationFieldNumber = 7,
    kLateMultiplierFieldNumber = 10,
    kAdditionalValueFieldNumber = 12,
    kExclusionCostFieldNumber = 13,
    kProblemIndexFieldNumber = 15,
  };
  // repeated .localsolver_vrp.TimeWindow time_windows = 1;
  int time_windows_size() const;
  private:
  int _internal_time_windows_size() const;
  public:
  void clear_time_windows();
  ::localsolver_vrp::TimeWindow* mutable_time_windows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::TimeWindow >*
      mutable_time_windows();
  private:
  const ::localsolver_vrp::TimeWindow& _internal_time_windows(int index) const;
  ::localsolver_vrp::TimeWindow* _internal_add_time_windows();
  public:
  const ::localsolver_vrp::TimeWindow& time_windows(int index) const;
  ::localsolver_vrp::TimeWindow* add_time_windows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::TimeWindow >&
      time_windows() const;

  // repeated float quantities = 2;
  int quantities_size() const;
  private:
  int _internal_quantities_size() const;
  public:
  void clear_quantities();
  private:
  float _internal_quantities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_quantities() const;
  void _internal_add_quantities(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_quantities();
  public:
  float quantities(int index) const;
  void set_quantities(int index, float value);
  void add_quantities(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      quantities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_quantities();

  // repeated uint32 vehicle_indices = 5;
  int vehicle_indices_size() const;
  private:
  int _internal_vehicle_indices_size() const;
  public:
  void clear_vehicle_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vehicle_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_vehicle_indices() const;
  void _internal_add_vehicle_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_vehicle_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 vehicle_indices(int index) const;
  void set_vehicle_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_vehicle_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      vehicle_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_vehicle_indices();

  // repeated float setup_quantities = 11;
  int setup_quantities_size() const;
  private:
  int _internal_setup_quantities_size() const;
  public:
  void clear_setup_quantities();
  private:
  float _internal_setup_quantities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_setup_quantities() const;
  void _internal_add_setup_quantities(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_setup_quantities();
  public:
  float setup_quantities(int index) const;
  void set_setup_quantities(int index, float value);
  void add_setup_quantities(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      setup_quantities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_setup_quantities();

  // repeated bool refill_quantities = 14;
  int refill_quantities_size() const;
  private:
  int _internal_refill_quantities_size() const;
  public:
  void clear_refill_quantities();
  private:
  bool _internal_refill_quantities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_refill_quantities() const;
  void _internal_add_refill_quantities(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_refill_quantities();
  public:
  bool refill_quantities(int index) const;
  void set_refill_quantities(int index, bool value);
  void add_refill_quantities(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      refill_quantities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_refill_quantities();

  // string id = 9;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 duration = 3;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 priority = 4;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 matrix_index = 6;
  void clear_matrix_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 matrix_index() const;
  void set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matrix_index() const;
  void _internal_set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 setup_duration = 7;
  void clear_setup_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 setup_duration() const;
  void set_setup_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_setup_duration() const;
  void _internal_set_setup_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float late_multiplier = 10;
  void clear_late_multiplier();
  float late_multiplier() const;
  void set_late_multiplier(float value);
  private:
  float _internal_late_multiplier() const;
  void _internal_set_late_multiplier(float value);
  public:

  // uint32 additional_value = 12;
  void clear_additional_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_value() const;
  void set_additional_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_additional_value() const;
  void _internal_set_additional_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float exclusion_cost = 13;
  void clear_exclusion_cost();
  float exclusion_cost() const;
  void set_exclusion_cost(float value);
  private:
  float _internal_exclusion_cost() const;
  void _internal_set_exclusion_cost(float value);
  public:

  // uint32 problem_index = 15;
  void clear_problem_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 problem_index() const;
  void set_problem_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_problem_index() const;
  void _internal_set_problem_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:localsolver_vrp.Service)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::TimeWindow > time_windows_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > quantities_;
  mutable std::atomic<int> _quantities_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > vehicle_indices_;
  mutable std::atomic<int> _vehicle_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > setup_quantities_;
  mutable std::atomic<int> _setup_quantities_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > refill_quantities_;
  mutable std::atomic<int> _refill_quantities_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matrix_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 setup_duration_;
  float late_multiplier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_value_;
  float exclusion_cost_;
  ::PROTOBUF_NAMESPACE_ID::uint32 problem_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fvrp_2eproto;
};
// -------------------------------------------------------------------

class Rest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_vrp.Rest) */ {
 public:
  inline Rest() : Rest(nullptr) {};
  virtual ~Rest();

  Rest(const Rest& from);
  Rest(Rest&& from) noexcept
    : Rest() {
    *this = ::std::move(from);
  }

  inline Rest& operator=(const Rest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rest& operator=(Rest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rest* internal_default_instance() {
    return reinterpret_cast<const Rest*>(
               &_Rest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Rest& a, Rest& b) {
    a.Swap(&b);
  }
  inline void Swap(Rest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rest* New() const final {
    return CreateMaybeMessage<Rest>(nullptr);
  }

  Rest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rest& from);
  void MergeFrom(const Rest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_vrp.Rest";
  }
  protected:
  explicit Rest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fvrp_2eproto);
    return ::descriptor_table_localsolver_5fvrp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 3,
    kTimeWindowFieldNumber = 1,
    kDurationFieldNumber = 2,
    kLateMultiplierFieldNumber = 4,
    kExclusionCostFieldNumber = 5,
  };
  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .localsolver_vrp.TimeWindow time_window = 1;
  bool has_time_window() const;
  private:
  bool _internal_has_time_window() const;
  public:
  void clear_time_window();
  const ::localsolver_vrp::TimeWindow& time_window() const;
  ::localsolver_vrp::TimeWindow* release_time_window();
  ::localsolver_vrp::TimeWindow* mutable_time_window();
  void set_allocated_time_window(::localsolver_vrp::TimeWindow* time_window);
  private:
  const ::localsolver_vrp::TimeWindow& _internal_time_window() const;
  ::localsolver_vrp::TimeWindow* _internal_mutable_time_window();
  public:
  void unsafe_arena_set_allocated_time_window(
      ::localsolver_vrp::TimeWindow* time_window);
  ::localsolver_vrp::TimeWindow* unsafe_arena_release_time_window();

  // uint32 duration = 2;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float late_multiplier = 4;
  void clear_late_multiplier();
  float late_multiplier() const;
  void set_late_multiplier(float value);
  private:
  float _internal_late_multiplier() const;
  void _internal_set_late_multiplier(float value);
  public:

  // float exclusion_cost = 5;
  void clear_exclusion_cost();
  float exclusion_cost() const;
  void set_exclusion_cost(float value);
  private:
  float _internal_exclusion_cost() const;
  void _internal_set_exclusion_cost(float value);
  public:

  // @@protoc_insertion_point(class_scope:localsolver_vrp.Rest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::localsolver_vrp::TimeWindow* time_window_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  float late_multiplier_;
  float exclusion_cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fvrp_2eproto;
};
// -------------------------------------------------------------------

class Capacity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_vrp.Capacity) */ {
 public:
  inline Capacity() : Capacity(nullptr) {};
  virtual ~Capacity();

  Capacity(const Capacity& from);
  Capacity(Capacity&& from) noexcept
    : Capacity() {
    *this = ::std::move(from);
  }

  inline Capacity& operator=(const Capacity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capacity& operator=(Capacity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Capacity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Capacity* internal_default_instance() {
    return reinterpret_cast<const Capacity*>(
               &_Capacity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Capacity& a, Capacity& b) {
    a.Swap(&b);
  }
  inline void Swap(Capacity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Capacity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Capacity* New() const final {
    return CreateMaybeMessage<Capacity>(nullptr);
  }

  Capacity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Capacity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Capacity& from);
  void MergeFrom(const Capacity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capacity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_vrp.Capacity";
  }
  protected:
  explicit Capacity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fvrp_2eproto);
    return ::descriptor_table_localsolver_5fvrp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
    kOverloadMultiplierFieldNumber = 2,
    kCountingFieldNumber = 3,
    kInitialLimitFieldNumber = 4,
    kInitialLoadFieldNumber = 5,
  };
  // float limit = 1;
  void clear_limit();
  float limit() const;
  void set_limit(float value);
  private:
  float _internal_limit() const;
  void _internal_set_limit(float value);
  public:

  // float overload_multiplier = 2;
  void clear_overload_multiplier();
  float overload_multiplier() const;
  void set_overload_multiplier(float value);
  private:
  float _internal_overload_multiplier() const;
  void _internal_set_overload_multiplier(float value);
  public:

  // bool counting = 3;
  void clear_counting();
  bool counting() const;
  void set_counting(bool value);
  private:
  bool _internal_counting() const;
  void _internal_set_counting(bool value);
  public:

  // float initial_limit = 4;
  void clear_initial_limit();
  float initial_limit() const;
  void set_initial_limit(float value);
  private:
  float _internal_initial_limit() const;
  void _internal_set_initial_limit(float value);
  public:

  // float initial_load = 5;
  void clear_initial_load();
  float initial_load() const;
  void set_initial_load(float value);
  private:
  float _internal_initial_load() const;
  void _internal_set_initial_load(float value);
  public:

  // @@protoc_insertion_point(class_scope:localsolver_vrp.Capacity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float limit_;
  float overload_multiplier_;
  bool counting_;
  float initial_limit_;
  float initial_load_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fvrp_2eproto;
};
// -------------------------------------------------------------------

class Vehicle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_vrp.Vehicle) */ {
 public:
  inline Vehicle() : Vehicle(nullptr) {};
  virtual ~Vehicle();

  Vehicle(const Vehicle& from);
  Vehicle(Vehicle&& from) noexcept
    : Vehicle() {
    *this = ::std::move(from);
  }

  inline Vehicle& operator=(const Vehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle& operator=(Vehicle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle* internal_default_instance() {
    return reinterpret_cast<const Vehicle*>(
               &_Vehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Vehicle& a, Vehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vehicle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle* New() const final {
    return CreateMaybeMessage<Vehicle>(nullptr);
  }

  Vehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle& from);
  void MergeFrom(const Vehicle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_vrp.Vehicle";
  }
  protected:
  explicit Vehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fvrp_2eproto);
    return ::descriptor_table_localsolver_5fvrp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapacitiesFieldNumber = 3,
    kRestsFieldNumber = 5,
    kIdFieldNumber = 1,
    kShiftPreferenceFieldNumber = 14,
    kTimeWindowFieldNumber = 4,
    kCostFixedFieldNumber = 6,
    kCostDistanceMultiplierFieldNumber = 7,
    kCostTimeMultiplierFieldNumber = 8,
    kCostWaitingTimeMultiplierFieldNumber = 9,
    kMatrixIndexFieldNumber = 10,
    kStartIndexFieldNumber = 11,
    kEndIndexFieldNumber = 12,
    kDurationFieldNumber = 13,
    kCostLateMultiplierFieldNumber = 15,
    kDayIndexFieldNumber = 16,
    kValueMatrixIndexFieldNumber = 17,
    kCostValueMultiplierFieldNumber = 18,
    kMaxRideTimeFieldNumber = 19,
    kMaxRideDistanceFieldNumber = 20,
    kDistanceFieldNumber = 22,
    kCoefServiceFieldNumber = 23,
    kCoefSetupFieldNumber = 24,
    kAdditionalServiceFieldNumber = 25,
    kAdditionalSetupFieldNumber = 26,
    kFreeApproachFieldNumber = 27,
    kFreeReturnFieldNumber = 28,
  };
  // repeated .localsolver_vrp.Capacity capacities = 3;
  int capacities_size() const;
  private:
  int _internal_capacities_size() const;
  public:
  void clear_capacities();
  ::localsolver_vrp::Capacity* mutable_capacities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Capacity >*
      mutable_capacities();
  private:
  const ::localsolver_vrp::Capacity& _internal_capacities(int index) const;
  ::localsolver_vrp::Capacity* _internal_add_capacities();
  public:
  const ::localsolver_vrp::Capacity& capacities(int index) const;
  ::localsolver_vrp::Capacity* add_capacities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Capacity >&
      capacities() const;

  // repeated .localsolver_vrp.Rest rests = 5;
  int rests_size() const;
  private:
  int _internal_rests_size() const;
  public:
  void clear_rests();
  ::localsolver_vrp::Rest* mutable_rests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Rest >*
      mutable_rests();
  private:
  const ::localsolver_vrp::Rest& _internal_rests(int index) const;
  ::localsolver_vrp::Rest* _internal_add_rests();
  public:
  const ::localsolver_vrp::Rest& rests(int index) const;
  ::localsolver_vrp::Rest* add_rests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Rest >&
      rests() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string shift_preference = 14;
  void clear_shift_preference();
  const std::string& shift_preference() const;
  void set_shift_preference(const std::string& value);
  void set_shift_preference(std::string&& value);
  void set_shift_preference(const char* value);
  void set_shift_preference(const char* value, size_t size);
  std::string* mutable_shift_preference();
  std::string* release_shift_preference();
  void set_allocated_shift_preference(std::string* shift_preference);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_shift_preference();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_shift_preference(
      std::string* shift_preference);
  private:
  const std::string& _internal_shift_preference() const;
  void _internal_set_shift_preference(const std::string& value);
  std::string* _internal_mutable_shift_preference();
  public:

  // .localsolver_vrp.TimeWindow time_window = 4;
  bool has_time_window() const;
  private:
  bool _internal_has_time_window() const;
  public:
  void clear_time_window();
  const ::localsolver_vrp::TimeWindow& time_window() const;
  ::localsolver_vrp::TimeWindow* release_time_window();
  ::localsolver_vrp::TimeWindow* mutable_time_window();
  void set_allocated_time_window(::localsolver_vrp::TimeWindow* time_window);
  private:
  const ::localsolver_vrp::TimeWindow& _internal_time_window() const;
  ::localsolver_vrp::TimeWindow* _internal_mutable_time_window();
  public:
  void unsafe_arena_set_allocated_time_window(
      ::localsolver_vrp::TimeWindow* time_window);
  ::localsolver_vrp::TimeWindow* unsafe_arena_release_time_window();

  // float cost_fixed = 6;
  void clear_cost_fixed();
  float cost_fixed() const;
  void set_cost_fixed(float value);
  private:
  float _internal_cost_fixed() const;
  void _internal_set_cost_fixed(float value);
  public:

  // float cost_distance_multiplier = 7;
  void clear_cost_distance_multiplier();
  float cost_distance_multiplier() const;
  void set_cost_distance_multiplier(float value);
  private:
  float _internal_cost_distance_multiplier() const;
  void _internal_set_cost_distance_multiplier(float value);
  public:

  // float cost_time_multiplier = 8;
  void clear_cost_time_multiplier();
  float cost_time_multiplier() const;
  void set_cost_time_multiplier(float value);
  private:
  float _internal_cost_time_multiplier() const;
  void _internal_set_cost_time_multiplier(float value);
  public:

  // float cost_waiting_time_multiplier = 9;
  void clear_cost_waiting_time_multiplier();
  float cost_waiting_time_multiplier() const;
  void set_cost_waiting_time_multiplier(float value);
  private:
  float _internal_cost_waiting_time_multiplier() const;
  void _internal_set_cost_waiting_time_multiplier(float value);
  public:

  // uint32 matrix_index = 10;
  void clear_matrix_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 matrix_index() const;
  void set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matrix_index() const;
  void _internal_set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 start_index = 11;
  void clear_start_index();
  ::PROTOBUF_NAMESPACE_ID::int32 start_index() const;
  void set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_index() const;
  void _internal_set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 end_index = 12;
  void clear_end_index();
  ::PROTOBUF_NAMESPACE_ID::int32 end_index() const;
  void set_end_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_index() const;
  void _internal_set_end_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 duration = 13;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float cost_late_multiplier = 15;
  void clear_cost_late_multiplier();
  float cost_late_multiplier() const;
  void set_cost_late_multiplier(float value);
  private:
  float _internal_cost_late_multiplier() const;
  void _internal_set_cost_late_multiplier(float value);
  public:

  // sint32 day_index = 16;
  void clear_day_index();
  ::PROTOBUF_NAMESPACE_ID::int32 day_index() const;
  void set_day_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day_index() const;
  void _internal_set_day_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 value_matrix_index = 17;
  void clear_value_matrix_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 value_matrix_index() const;
  void set_value_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value_matrix_index() const;
  void _internal_set_value_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float cost_value_multiplier = 18;
  void clear_cost_value_multiplier();
  float cost_value_multiplier() const;
  void set_cost_value_multiplier(float value);
  private:
  float _internal_cost_value_multiplier() const;
  void _internal_set_cost_value_multiplier(float value);
  public:

  // uint32 max_ride_time = 19;
  void clear_max_ride_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ride_time() const;
  void set_max_ride_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ride_time() const;
  void _internal_set_max_ride_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_ride_distance = 20;
  void clear_max_ride_distance();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ride_distance() const;
  void set_max_ride_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ride_distance() const;
  void _internal_set_max_ride_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 distance = 22;
  void clear_distance();
  ::PROTOBUF_NAMESPACE_ID::uint32 distance() const;
  void set_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distance() const;
  void _internal_set_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float coef_service = 23;
  void clear_coef_service();
  float coef_service() const;
  void set_coef_service(float value);
  private:
  float _internal_coef_service() const;
  void _internal_set_coef_service(float value);
  public:

  // float coef_setup = 24;
  void clear_coef_setup();
  float coef_setup() const;
  void set_coef_setup(float value);
  private:
  float _internal_coef_setup() const;
  void _internal_set_coef_setup(float value);
  public:

  // uint32 additional_service = 25;
  void clear_additional_service();
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_service() const;
  void set_additional_service(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_additional_service() const;
  void _internal_set_additional_service(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 additional_setup = 26;
  void clear_additional_setup();
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_setup() const;
  void set_additional_setup(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_additional_setup() const;
  void _internal_set_additional_setup(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool free_approach = 27;
  void clear_free_approach();
  bool free_approach() const;
  void set_free_approach(bool value);
  private:
  bool _internal_free_approach() const;
  void _internal_set_free_approach(bool value);
  public:

  // bool free_return = 28;
  void clear_free_return();
  bool free_return() const;
  void set_free_return(bool value);
  private:
  bool _internal_free_return() const;
  void _internal_set_free_return(bool value);
  public:

  // @@protoc_insertion_point(class_scope:localsolver_vrp.Vehicle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Capacity > capacities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Rest > rests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shift_preference_;
  ::localsolver_vrp::TimeWindow* time_window_;
  float cost_fixed_;
  float cost_distance_multiplier_;
  float cost_time_multiplier_;
  float cost_waiting_time_multiplier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matrix_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  float cost_late_multiplier_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_matrix_index_;
  float cost_value_multiplier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ride_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ride_distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 distance_;
  float coef_service_;
  float coef_setup_;
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_service_;
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_setup_;
  bool free_approach_;
  bool free_return_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fvrp_2eproto;
};
// -------------------------------------------------------------------

class Relation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_vrp.Relation) */ {
 public:
  inline Relation() : Relation(nullptr) {};
  virtual ~Relation();

  Relation(const Relation& from);
  Relation(Relation&& from) noexcept
    : Relation() {
    *this = ::std::move(from);
  }

  inline Relation& operator=(const Relation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Relation& operator=(Relation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Relation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Relation* internal_default_instance() {
    return reinterpret_cast<const Relation*>(
               &_Relation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Relation& a, Relation& b) {
    a.Swap(&b);
  }
  inline void Swap(Relation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Relation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Relation* New() const final {
    return CreateMaybeMessage<Relation>(nullptr);
  }

  Relation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Relation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Relation& from);
  void MergeFrom(const Relation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Relation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_vrp.Relation";
  }
  protected:
  explicit Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fvrp_2eproto);
    return ::descriptor_table_localsolver_5fvrp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkedIdsFieldNumber = 2,
    kLinkedVehicleIdsFieldNumber = 4,
    kTypeFieldNumber = 1,
    kLapseFieldNumber = 3,
  };
  // repeated string linked_ids = 2;
  int linked_ids_size() const;
  private:
  int _internal_linked_ids_size() const;
  public:
  void clear_linked_ids();
  const std::string& linked_ids(int index) const;
  std::string* mutable_linked_ids(int index);
  void set_linked_ids(int index, const std::string& value);
  void set_linked_ids(int index, std::string&& value);
  void set_linked_ids(int index, const char* value);
  void set_linked_ids(int index, const char* value, size_t size);
  std::string* add_linked_ids();
  void add_linked_ids(const std::string& value);
  void add_linked_ids(std::string&& value);
  void add_linked_ids(const char* value);
  void add_linked_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& linked_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_linked_ids();
  private:
  const std::string& _internal_linked_ids(int index) const;
  std::string* _internal_add_linked_ids();
  public:

  // repeated string linked_vehicle_ids = 4;
  int linked_vehicle_ids_size() const;
  private:
  int _internal_linked_vehicle_ids_size() const;
  public:
  void clear_linked_vehicle_ids();
  const std::string& linked_vehicle_ids(int index) const;
  std::string* mutable_linked_vehicle_ids(int index);
  void set_linked_vehicle_ids(int index, const std::string& value);
  void set_linked_vehicle_ids(int index, std::string&& value);
  void set_linked_vehicle_ids(int index, const char* value);
  void set_linked_vehicle_ids(int index, const char* value, size_t size);
  std::string* add_linked_vehicle_ids();
  void add_linked_vehicle_ids(const std::string& value);
  void add_linked_vehicle_ids(std::string&& value);
  void add_linked_vehicle_ids(const char* value);
  void add_linked_vehicle_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& linked_vehicle_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_linked_vehicle_ids();
  private:
  const std::string& _internal_linked_vehicle_ids(int index) const;
  std::string* _internal_add_linked_vehicle_ids();
  public:

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint32 lapse = 3;
  void clear_lapse();
  ::PROTOBUF_NAMESPACE_ID::uint32 lapse() const;
  void set_lapse(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lapse() const;
  void _internal_set_lapse(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:localsolver_vrp.Relation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> linked_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> linked_vehicle_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lapse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fvrp_2eproto;
};
// -------------------------------------------------------------------

class Route PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_vrp.Route) */ {
 public:
  inline Route() : Route(nullptr) {};
  virtual ~Route();

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Route& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Route* New() const final {
    return CreateMaybeMessage<Route>(nullptr);
  }

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_vrp.Route";
  }
  protected:
  explicit Route(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fvrp_2eproto);
    return ::descriptor_table_localsolver_5fvrp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIdsFieldNumber = 2,
    kVehicleIdFieldNumber = 1,
  };
  // repeated string service_ids = 2;
  int service_ids_size() const;
  private:
  int _internal_service_ids_size() const;
  public:
  void clear_service_ids();
  const std::string& service_ids(int index) const;
  std::string* mutable_service_ids(int index);
  void set_service_ids(int index, const std::string& value);
  void set_service_ids(int index, std::string&& value);
  void set_service_ids(int index, const char* value);
  void set_service_ids(int index, const char* value, size_t size);
  std::string* add_service_ids();
  void add_service_ids(const std::string& value);
  void add_service_ids(std::string&& value);
  void add_service_ids(const char* value);
  void add_service_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& service_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_service_ids();
  private:
  const std::string& _internal_service_ids(int index) const;
  std::string* _internal_add_service_ids();
  public:

  // string vehicle_id = 1;
  void clear_vehicle_id();
  const std::string& vehicle_id() const;
  void set_vehicle_id(const std::string& value);
  void set_vehicle_id(std::string&& value);
  void set_vehicle_id(const char* value);
  void set_vehicle_id(const char* value, size_t size);
  std::string* mutable_vehicle_id();
  std::string* release_vehicle_id();
  void set_allocated_vehicle_id(std::string* vehicle_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vehicle_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vehicle_id(
      std::string* vehicle_id);
  private:
  const std::string& _internal_vehicle_id() const;
  void _internal_set_vehicle_id(const std::string& value);
  std::string* _internal_mutable_vehicle_id();
  public:

  // @@protoc_insertion_point(class_scope:localsolver_vrp.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> service_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fvrp_2eproto;
};
// -------------------------------------------------------------------

class Problem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localsolver_vrp.Problem) */ {
 public:
  inline Problem() : Problem(nullptr) {};
  virtual ~Problem();

  Problem(const Problem& from);
  Problem(Problem&& from) noexcept
    : Problem() {
    *this = ::std::move(from);
  }

  inline Problem& operator=(const Problem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Problem& operator=(Problem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Problem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Problem* internal_default_instance() {
    return reinterpret_cast<const Problem*>(
               &_Problem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Problem& a, Problem& b) {
    a.Swap(&b);
  }
  inline void Swap(Problem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Problem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Problem* New() const final {
    return CreateMaybeMessage<Problem>(nullptr);
  }

  Problem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Problem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Problem& from);
  void MergeFrom(const Problem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Problem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localsolver_vrp.Problem";
  }
  protected:
  explicit Problem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_localsolver_5fvrp_2eproto);
    return ::descriptor_table_localsolver_5fvrp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehiclesFieldNumber = 3,
    kServicesFieldNumber = 4,
    kMatricesFieldNumber = 5,
    kRelationsFieldNumber = 6,
    kRoutesFieldNumber = 7,
  };
  // repeated .localsolver_vrp.Vehicle vehicles = 3;
  int vehicles_size() const;
  private:
  int _internal_vehicles_size() const;
  public:
  void clear_vehicles();
  ::localsolver_vrp::Vehicle* mutable_vehicles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Vehicle >*
      mutable_vehicles();
  private:
  const ::localsolver_vrp::Vehicle& _internal_vehicles(int index) const;
  ::localsolver_vrp::Vehicle* _internal_add_vehicles();
  public:
  const ::localsolver_vrp::Vehicle& vehicles(int index) const;
  ::localsolver_vrp::Vehicle* add_vehicles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Vehicle >&
      vehicles() const;

  // repeated .localsolver_vrp.Service services = 4;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::localsolver_vrp::Service* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Service >*
      mutable_services();
  private:
  const ::localsolver_vrp::Service& _internal_services(int index) const;
  ::localsolver_vrp::Service* _internal_add_services();
  public:
  const ::localsolver_vrp::Service& services(int index) const;
  ::localsolver_vrp::Service* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Service >&
      services() const;

  // repeated .localsolver_vrp.Matrix matrices = 5;
  int matrices_size() const;
  private:
  int _internal_matrices_size() const;
  public:
  void clear_matrices();
  ::localsolver_vrp::Matrix* mutable_matrices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Matrix >*
      mutable_matrices();
  private:
  const ::localsolver_vrp::Matrix& _internal_matrices(int index) const;
  ::localsolver_vrp::Matrix* _internal_add_matrices();
  public:
  const ::localsolver_vrp::Matrix& matrices(int index) const;
  ::localsolver_vrp::Matrix* add_matrices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Matrix >&
      matrices() const;

  // repeated .localsolver_vrp.Relation relations = 6;
  int relations_size() const;
  private:
  int _internal_relations_size() const;
  public:
  void clear_relations();
  ::localsolver_vrp::Relation* mutable_relations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Relation >*
      mutable_relations();
  private:
  const ::localsolver_vrp::Relation& _internal_relations(int index) const;
  ::localsolver_vrp::Relation* _internal_add_relations();
  public:
  const ::localsolver_vrp::Relation& relations(int index) const;
  ::localsolver_vrp::Relation* add_relations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Relation >&
      relations() const;

  // repeated .localsolver_vrp.Route routes = 7;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::localsolver_vrp::Route* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Route >*
      mutable_routes();
  private:
  const ::localsolver_vrp::Route& _internal_routes(int index) const;
  ::localsolver_vrp::Route* _internal_add_routes();
  public:
  const ::localsolver_vrp::Route& routes(int index) const;
  ::localsolver_vrp::Route* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Route >&
      routes() const;

  // @@protoc_insertion_point(class_scope:localsolver_vrp.Problem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Vehicle > vehicles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Service > services_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Matrix > matrices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Relation > relations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Route > routes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localsolver_5fvrp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Matrix

// repeated float time = 2 [packed = true];
inline int Matrix::_internal_time_size() const {
  return time_.size();
}
inline int Matrix::time_size() const {
  return _internal_time_size();
}
inline void Matrix::clear_time() {
  time_.Clear();
}
inline float Matrix::_internal_time(int index) const {
  return time_.Get(index);
}
inline float Matrix::time(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Matrix.time)
  return _internal_time(index);
}
inline void Matrix::set_time(int index, float value) {
  time_.Set(index, value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Matrix.time)
}
inline void Matrix::_internal_add_time(float value) {
  time_.Add(value);
}
inline void Matrix::add_time(float value) {
  _internal_add_time(value);
  // @@protoc_insertion_point(field_add:localsolver_vrp.Matrix.time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::_internal_time() const {
  return time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::time() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Matrix.time)
  return _internal_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::_internal_mutable_time() {
  return &time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Matrix.time)
  return _internal_mutable_time();
}

// repeated float distance = 3 [packed = true];
inline int Matrix::_internal_distance_size() const {
  return distance_.size();
}
inline int Matrix::distance_size() const {
  return _internal_distance_size();
}
inline void Matrix::clear_distance() {
  distance_.Clear();
}
inline float Matrix::_internal_distance(int index) const {
  return distance_.Get(index);
}
inline float Matrix::distance(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Matrix.distance)
  return _internal_distance(index);
}
inline void Matrix::set_distance(int index, float value) {
  distance_.Set(index, value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Matrix.distance)
}
inline void Matrix::_internal_add_distance(float value) {
  distance_.Add(value);
}
inline void Matrix::add_distance(float value) {
  _internal_add_distance(value);
  // @@protoc_insertion_point(field_add:localsolver_vrp.Matrix.distance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::_internal_distance() const {
  return distance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::distance() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Matrix.distance)
  return _internal_distance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::_internal_mutable_distance() {
  return &distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Matrix.distance)
  return _internal_mutable_distance();
}

// repeated float value = 4 [packed = true];
inline int Matrix::_internal_value_size() const {
  return value_.size();
}
inline int Matrix::value_size() const {
  return _internal_value_size();
}
inline void Matrix::clear_value() {
  value_.Clear();
}
inline float Matrix::_internal_value(int index) const {
  return value_.Get(index);
}
inline float Matrix::value(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Matrix.value)
  return _internal_value(index);
}
inline void Matrix::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Matrix.value)
}
inline void Matrix::_internal_add_value(float value) {
  value_.Add(value);
}
inline void Matrix::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:localsolver_vrp.Matrix.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::value() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Matrix.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Matrix.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// TimeWindow

// uint32 start = 1;
inline void TimeWindow::clear_start() {
  start_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeWindow::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeWindow::start() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.TimeWindow.start)
  return _internal_start();
}
inline void TimeWindow::_internal_set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_ = value;
}
inline void TimeWindow::set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.TimeWindow.start)
}

// uint32 end = 2;
inline void TimeWindow::clear_end() {
  end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeWindow::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeWindow::end() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.TimeWindow.end)
  return _internal_end();
}
inline void TimeWindow::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_ = value;
}
inline void TimeWindow::set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.TimeWindow.end)
}

// uint32 maximum_lateness = 3;
inline void TimeWindow::clear_maximum_lateness() {
  maximum_lateness_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeWindow::_internal_maximum_lateness() const {
  return maximum_lateness_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeWindow::maximum_lateness() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.TimeWindow.maximum_lateness)
  return _internal_maximum_lateness();
}
inline void TimeWindow::_internal_set_maximum_lateness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maximum_lateness_ = value;
}
inline void TimeWindow::set_maximum_lateness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maximum_lateness(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.TimeWindow.maximum_lateness)
}

// -------------------------------------------------------------------

// Service

// repeated .localsolver_vrp.TimeWindow time_windows = 1;
inline int Service::_internal_time_windows_size() const {
  return time_windows_.size();
}
inline int Service::time_windows_size() const {
  return _internal_time_windows_size();
}
inline void Service::clear_time_windows() {
  time_windows_.Clear();
}
inline ::localsolver_vrp::TimeWindow* Service::mutable_time_windows(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Service.time_windows)
  return time_windows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::TimeWindow >*
Service::mutable_time_windows() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Service.time_windows)
  return &time_windows_;
}
inline const ::localsolver_vrp::TimeWindow& Service::_internal_time_windows(int index) const {
  return time_windows_.Get(index);
}
inline const ::localsolver_vrp::TimeWindow& Service::time_windows(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.time_windows)
  return _internal_time_windows(index);
}
inline ::localsolver_vrp::TimeWindow* Service::_internal_add_time_windows() {
  return time_windows_.Add();
}
inline ::localsolver_vrp::TimeWindow* Service::add_time_windows() {
  // @@protoc_insertion_point(field_add:localsolver_vrp.Service.time_windows)
  return _internal_add_time_windows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::TimeWindow >&
Service::time_windows() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Service.time_windows)
  return time_windows_;
}

// repeated float quantities = 2;
inline int Service::_internal_quantities_size() const {
  return quantities_.size();
}
inline int Service::quantities_size() const {
  return _internal_quantities_size();
}
inline void Service::clear_quantities() {
  quantities_.Clear();
}
inline float Service::_internal_quantities(int index) const {
  return quantities_.Get(index);
}
inline float Service::quantities(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.quantities)
  return _internal_quantities(index);
}
inline void Service::set_quantities(int index, float value) {
  quantities_.Set(index, value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.quantities)
}
inline void Service::_internal_add_quantities(float value) {
  quantities_.Add(value);
}
inline void Service::add_quantities(float value) {
  _internal_add_quantities(value);
  // @@protoc_insertion_point(field_add:localsolver_vrp.Service.quantities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Service::_internal_quantities() const {
  return quantities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Service::quantities() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Service.quantities)
  return _internal_quantities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Service::_internal_mutable_quantities() {
  return &quantities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Service::mutable_quantities() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Service.quantities)
  return _internal_mutable_quantities();
}

// uint32 duration = 3;
inline void Service::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::duration() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.duration)
  return _internal_duration();
}
inline void Service::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void Service::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.duration)
}

// uint32 priority = 4;
inline void Service::clear_priority() {
  priority_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::priority() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.priority)
  return _internal_priority();
}
inline void Service::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  priority_ = value;
}
inline void Service::set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.priority)
}

// repeated uint32 vehicle_indices = 5;
inline int Service::_internal_vehicle_indices_size() const {
  return vehicle_indices_.size();
}
inline int Service::vehicle_indices_size() const {
  return _internal_vehicle_indices_size();
}
inline void Service::clear_vehicle_indices() {
  vehicle_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_vehicle_indices(int index) const {
  return vehicle_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::vehicle_indices(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.vehicle_indices)
  return _internal_vehicle_indices(index);
}
inline void Service::set_vehicle_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vehicle_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.vehicle_indices)
}
inline void Service::_internal_add_vehicle_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vehicle_indices_.Add(value);
}
inline void Service::add_vehicle_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_vehicle_indices(value);
  // @@protoc_insertion_point(field_add:localsolver_vrp.Service.vehicle_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Service::_internal_vehicle_indices() const {
  return vehicle_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Service::vehicle_indices() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Service.vehicle_indices)
  return _internal_vehicle_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Service::_internal_mutable_vehicle_indices() {
  return &vehicle_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Service::mutable_vehicle_indices() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Service.vehicle_indices)
  return _internal_mutable_vehicle_indices();
}

// uint32 matrix_index = 6;
inline void Service::clear_matrix_index() {
  matrix_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_matrix_index() const {
  return matrix_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::matrix_index() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.matrix_index)
  return _internal_matrix_index();
}
inline void Service::_internal_set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  matrix_index_ = value;
}
inline void Service::set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matrix_index(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.matrix_index)
}

// uint32 setup_duration = 7;
inline void Service::clear_setup_duration() {
  setup_duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_setup_duration() const {
  return setup_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::setup_duration() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.setup_duration)
  return _internal_setup_duration();
}
inline void Service::_internal_set_setup_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  setup_duration_ = value;
}
inline void Service::set_setup_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_setup_duration(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.setup_duration)
}

// string id = 9;
inline void Service::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Service::id() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.id)
  return _internal_id();
}
inline void Service::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.id)
}
inline std::string* Service::mutable_id() {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Service.id)
  return _internal_mutable_id();
}
inline const std::string& Service::_internal_id() const {
  return id_.Get();
}
inline void Service::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Service::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:localsolver_vrp.Service.id)
}
inline void Service::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:localsolver_vrp.Service.id)
}
inline void Service::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:localsolver_vrp.Service.id)
}
inline std::string* Service::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Service::release_id() {
  // @@protoc_insertion_point(field_release:localsolver_vrp.Service.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Service::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:localsolver_vrp.Service.id)
}
inline std::string* Service::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:localsolver_vrp.Service.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Service::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localsolver_vrp.Service.id)
}

// float late_multiplier = 10;
inline void Service::clear_late_multiplier() {
  late_multiplier_ = 0;
}
inline float Service::_internal_late_multiplier() const {
  return late_multiplier_;
}
inline float Service::late_multiplier() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.late_multiplier)
  return _internal_late_multiplier();
}
inline void Service::_internal_set_late_multiplier(float value) {
  
  late_multiplier_ = value;
}
inline void Service::set_late_multiplier(float value) {
  _internal_set_late_multiplier(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.late_multiplier)
}

// repeated float setup_quantities = 11;
inline int Service::_internal_setup_quantities_size() const {
  return setup_quantities_.size();
}
inline int Service::setup_quantities_size() const {
  return _internal_setup_quantities_size();
}
inline void Service::clear_setup_quantities() {
  setup_quantities_.Clear();
}
inline float Service::_internal_setup_quantities(int index) const {
  return setup_quantities_.Get(index);
}
inline float Service::setup_quantities(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.setup_quantities)
  return _internal_setup_quantities(index);
}
inline void Service::set_setup_quantities(int index, float value) {
  setup_quantities_.Set(index, value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.setup_quantities)
}
inline void Service::_internal_add_setup_quantities(float value) {
  setup_quantities_.Add(value);
}
inline void Service::add_setup_quantities(float value) {
  _internal_add_setup_quantities(value);
  // @@protoc_insertion_point(field_add:localsolver_vrp.Service.setup_quantities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Service::_internal_setup_quantities() const {
  return setup_quantities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Service::setup_quantities() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Service.setup_quantities)
  return _internal_setup_quantities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Service::_internal_mutable_setup_quantities() {
  return &setup_quantities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Service::mutable_setup_quantities() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Service.setup_quantities)
  return _internal_mutable_setup_quantities();
}

// uint32 additional_value = 12;
inline void Service::clear_additional_value() {
  additional_value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_additional_value() const {
  return additional_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::additional_value() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.additional_value)
  return _internal_additional_value();
}
inline void Service::_internal_set_additional_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  additional_value_ = value;
}
inline void Service::set_additional_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_additional_value(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.additional_value)
}

// float exclusion_cost = 13;
inline void Service::clear_exclusion_cost() {
  exclusion_cost_ = 0;
}
inline float Service::_internal_exclusion_cost() const {
  return exclusion_cost_;
}
inline float Service::exclusion_cost() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.exclusion_cost)
  return _internal_exclusion_cost();
}
inline void Service::_internal_set_exclusion_cost(float value) {
  
  exclusion_cost_ = value;
}
inline void Service::set_exclusion_cost(float value) {
  _internal_set_exclusion_cost(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.exclusion_cost)
}

// repeated bool refill_quantities = 14;
inline int Service::_internal_refill_quantities_size() const {
  return refill_quantities_.size();
}
inline int Service::refill_quantities_size() const {
  return _internal_refill_quantities_size();
}
inline void Service::clear_refill_quantities() {
  refill_quantities_.Clear();
}
inline bool Service::_internal_refill_quantities(int index) const {
  return refill_quantities_.Get(index);
}
inline bool Service::refill_quantities(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.refill_quantities)
  return _internal_refill_quantities(index);
}
inline void Service::set_refill_quantities(int index, bool value) {
  refill_quantities_.Set(index, value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.refill_quantities)
}
inline void Service::_internal_add_refill_quantities(bool value) {
  refill_quantities_.Add(value);
}
inline void Service::add_refill_quantities(bool value) {
  _internal_add_refill_quantities(value);
  // @@protoc_insertion_point(field_add:localsolver_vrp.Service.refill_quantities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Service::_internal_refill_quantities() const {
  return refill_quantities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Service::refill_quantities() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Service.refill_quantities)
  return _internal_refill_quantities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Service::_internal_mutable_refill_quantities() {
  return &refill_quantities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Service::mutable_refill_quantities() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Service.refill_quantities)
  return _internal_mutable_refill_quantities();
}

// uint32 problem_index = 15;
inline void Service::clear_problem_index() {
  problem_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::_internal_problem_index() const {
  return problem_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Service::problem_index() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Service.problem_index)
  return _internal_problem_index();
}
inline void Service::_internal_set_problem_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  problem_index_ = value;
}
inline void Service::set_problem_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_problem_index(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Service.problem_index)
}

// -------------------------------------------------------------------

// Rest

// .localsolver_vrp.TimeWindow time_window = 1;
inline bool Rest::_internal_has_time_window() const {
  return this != internal_default_instance() && time_window_ != nullptr;
}
inline bool Rest::has_time_window() const {
  return _internal_has_time_window();
}
inline void Rest::clear_time_window() {
  if (GetArena() == nullptr && time_window_ != nullptr) {
    delete time_window_;
  }
  time_window_ = nullptr;
}
inline const ::localsolver_vrp::TimeWindow& Rest::_internal_time_window() const {
  const ::localsolver_vrp::TimeWindow* p = time_window_;
  return p != nullptr ? *p : *reinterpret_cast<const ::localsolver_vrp::TimeWindow*>(
      &::localsolver_vrp::_TimeWindow_default_instance_);
}
inline const ::localsolver_vrp::TimeWindow& Rest::time_window() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Rest.time_window)
  return _internal_time_window();
}
inline void Rest::unsafe_arena_set_allocated_time_window(
    ::localsolver_vrp::TimeWindow* time_window) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_window_);
  }
  time_window_ = time_window;
  if (time_window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localsolver_vrp.Rest.time_window)
}
inline ::localsolver_vrp::TimeWindow* Rest::release_time_window() {
  auto temp = unsafe_arena_release_time_window();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::localsolver_vrp::TimeWindow* Rest::unsafe_arena_release_time_window() {
  // @@protoc_insertion_point(field_release:localsolver_vrp.Rest.time_window)
  
  ::localsolver_vrp::TimeWindow* temp = time_window_;
  time_window_ = nullptr;
  return temp;
}
inline ::localsolver_vrp::TimeWindow* Rest::_internal_mutable_time_window() {
  
  if (time_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::localsolver_vrp::TimeWindow>(GetArena());
    time_window_ = p;
  }
  return time_window_;
}
inline ::localsolver_vrp::TimeWindow* Rest::mutable_time_window() {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Rest.time_window)
  return _internal_mutable_time_window();
}
inline void Rest::set_allocated_time_window(::localsolver_vrp::TimeWindow* time_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete time_window_;
  }
  if (time_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_window);
    if (message_arena != submessage_arena) {
      time_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_window, submessage_arena);
    }
    
  } else {
    
  }
  time_window_ = time_window;
  // @@protoc_insertion_point(field_set_allocated:localsolver_vrp.Rest.time_window)
}

// uint32 duration = 2;
inline void Rest::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rest::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rest::duration() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Rest.duration)
  return _internal_duration();
}
inline void Rest::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void Rest::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Rest.duration)
}

// string id = 3;
inline void Rest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Rest::id() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Rest.id)
  return _internal_id();
}
inline void Rest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Rest.id)
}
inline std::string* Rest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Rest.id)
  return _internal_mutable_id();
}
inline const std::string& Rest::_internal_id() const {
  return id_.Get();
}
inline void Rest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Rest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:localsolver_vrp.Rest.id)
}
inline void Rest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:localsolver_vrp.Rest.id)
}
inline void Rest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:localsolver_vrp.Rest.id)
}
inline std::string* Rest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Rest::release_id() {
  // @@protoc_insertion_point(field_release:localsolver_vrp.Rest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:localsolver_vrp.Rest.id)
}
inline std::string* Rest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:localsolver_vrp.Rest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Rest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localsolver_vrp.Rest.id)
}

// float late_multiplier = 4;
inline void Rest::clear_late_multiplier() {
  late_multiplier_ = 0;
}
inline float Rest::_internal_late_multiplier() const {
  return late_multiplier_;
}
inline float Rest::late_multiplier() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Rest.late_multiplier)
  return _internal_late_multiplier();
}
inline void Rest::_internal_set_late_multiplier(float value) {
  
  late_multiplier_ = value;
}
inline void Rest::set_late_multiplier(float value) {
  _internal_set_late_multiplier(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Rest.late_multiplier)
}

// float exclusion_cost = 5;
inline void Rest::clear_exclusion_cost() {
  exclusion_cost_ = 0;
}
inline float Rest::_internal_exclusion_cost() const {
  return exclusion_cost_;
}
inline float Rest::exclusion_cost() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Rest.exclusion_cost)
  return _internal_exclusion_cost();
}
inline void Rest::_internal_set_exclusion_cost(float value) {
  
  exclusion_cost_ = value;
}
inline void Rest::set_exclusion_cost(float value) {
  _internal_set_exclusion_cost(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Rest.exclusion_cost)
}

// -------------------------------------------------------------------

// Capacity

// float limit = 1;
inline void Capacity::clear_limit() {
  limit_ = 0;
}
inline float Capacity::_internal_limit() const {
  return limit_;
}
inline float Capacity::limit() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Capacity.limit)
  return _internal_limit();
}
inline void Capacity::_internal_set_limit(float value) {
  
  limit_ = value;
}
inline void Capacity::set_limit(float value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Capacity.limit)
}

// float overload_multiplier = 2;
inline void Capacity::clear_overload_multiplier() {
  overload_multiplier_ = 0;
}
inline float Capacity::_internal_overload_multiplier() const {
  return overload_multiplier_;
}
inline float Capacity::overload_multiplier() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Capacity.overload_multiplier)
  return _internal_overload_multiplier();
}
inline void Capacity::_internal_set_overload_multiplier(float value) {
  
  overload_multiplier_ = value;
}
inline void Capacity::set_overload_multiplier(float value) {
  _internal_set_overload_multiplier(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Capacity.overload_multiplier)
}

// bool counting = 3;
inline void Capacity::clear_counting() {
  counting_ = false;
}
inline bool Capacity::_internal_counting() const {
  return counting_;
}
inline bool Capacity::counting() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Capacity.counting)
  return _internal_counting();
}
inline void Capacity::_internal_set_counting(bool value) {
  
  counting_ = value;
}
inline void Capacity::set_counting(bool value) {
  _internal_set_counting(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Capacity.counting)
}

// float initial_limit = 4;
inline void Capacity::clear_initial_limit() {
  initial_limit_ = 0;
}
inline float Capacity::_internal_initial_limit() const {
  return initial_limit_;
}
inline float Capacity::initial_limit() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Capacity.initial_limit)
  return _internal_initial_limit();
}
inline void Capacity::_internal_set_initial_limit(float value) {
  
  initial_limit_ = value;
}
inline void Capacity::set_initial_limit(float value) {
  _internal_set_initial_limit(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Capacity.initial_limit)
}

// float initial_load = 5;
inline void Capacity::clear_initial_load() {
  initial_load_ = 0;
}
inline float Capacity::_internal_initial_load() const {
  return initial_load_;
}
inline float Capacity::initial_load() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Capacity.initial_load)
  return _internal_initial_load();
}
inline void Capacity::_internal_set_initial_load(float value) {
  
  initial_load_ = value;
}
inline void Capacity::set_initial_load(float value) {
  _internal_set_initial_load(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Capacity.initial_load)
}

// -------------------------------------------------------------------

// Vehicle

// string id = 1;
inline void Vehicle::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vehicle::id() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.id)
  return _internal_id();
}
inline void Vehicle::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.id)
}
inline std::string* Vehicle::mutable_id() {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Vehicle.id)
  return _internal_mutable_id();
}
inline const std::string& Vehicle::_internal_id() const {
  return id_.Get();
}
inline void Vehicle::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vehicle::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:localsolver_vrp.Vehicle.id)
}
inline void Vehicle::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:localsolver_vrp.Vehicle.id)
}
inline void Vehicle::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:localsolver_vrp.Vehicle.id)
}
inline std::string* Vehicle::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vehicle::release_id() {
  // @@protoc_insertion_point(field_release:localsolver_vrp.Vehicle.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vehicle::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:localsolver_vrp.Vehicle.id)
}
inline std::string* Vehicle::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:localsolver_vrp.Vehicle.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Vehicle::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localsolver_vrp.Vehicle.id)
}

// repeated .localsolver_vrp.Capacity capacities = 3;
inline int Vehicle::_internal_capacities_size() const {
  return capacities_.size();
}
inline int Vehicle::capacities_size() const {
  return _internal_capacities_size();
}
inline void Vehicle::clear_capacities() {
  capacities_.Clear();
}
inline ::localsolver_vrp::Capacity* Vehicle::mutable_capacities(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Vehicle.capacities)
  return capacities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Capacity >*
Vehicle::mutable_capacities() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Vehicle.capacities)
  return &capacities_;
}
inline const ::localsolver_vrp::Capacity& Vehicle::_internal_capacities(int index) const {
  return capacities_.Get(index);
}
inline const ::localsolver_vrp::Capacity& Vehicle::capacities(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.capacities)
  return _internal_capacities(index);
}
inline ::localsolver_vrp::Capacity* Vehicle::_internal_add_capacities() {
  return capacities_.Add();
}
inline ::localsolver_vrp::Capacity* Vehicle::add_capacities() {
  // @@protoc_insertion_point(field_add:localsolver_vrp.Vehicle.capacities)
  return _internal_add_capacities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Capacity >&
Vehicle::capacities() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Vehicle.capacities)
  return capacities_;
}

// .localsolver_vrp.TimeWindow time_window = 4;
inline bool Vehicle::_internal_has_time_window() const {
  return this != internal_default_instance() && time_window_ != nullptr;
}
inline bool Vehicle::has_time_window() const {
  return _internal_has_time_window();
}
inline void Vehicle::clear_time_window() {
  if (GetArena() == nullptr && time_window_ != nullptr) {
    delete time_window_;
  }
  time_window_ = nullptr;
}
inline const ::localsolver_vrp::TimeWindow& Vehicle::_internal_time_window() const {
  const ::localsolver_vrp::TimeWindow* p = time_window_;
  return p != nullptr ? *p : *reinterpret_cast<const ::localsolver_vrp::TimeWindow*>(
      &::localsolver_vrp::_TimeWindow_default_instance_);
}
inline const ::localsolver_vrp::TimeWindow& Vehicle::time_window() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.time_window)
  return _internal_time_window();
}
inline void Vehicle::unsafe_arena_set_allocated_time_window(
    ::localsolver_vrp::TimeWindow* time_window) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_window_);
  }
  time_window_ = time_window;
  if (time_window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localsolver_vrp.Vehicle.time_window)
}
inline ::localsolver_vrp::TimeWindow* Vehicle::release_time_window() {
  auto temp = unsafe_arena_release_time_window();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::localsolver_vrp::TimeWindow* Vehicle::unsafe_arena_release_time_window() {
  // @@protoc_insertion_point(field_release:localsolver_vrp.Vehicle.time_window)
  
  ::localsolver_vrp::TimeWindow* temp = time_window_;
  time_window_ = nullptr;
  return temp;
}
inline ::localsolver_vrp::TimeWindow* Vehicle::_internal_mutable_time_window() {
  
  if (time_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::localsolver_vrp::TimeWindow>(GetArena());
    time_window_ = p;
  }
  return time_window_;
}
inline ::localsolver_vrp::TimeWindow* Vehicle::mutable_time_window() {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Vehicle.time_window)
  return _internal_mutable_time_window();
}
inline void Vehicle::set_allocated_time_window(::localsolver_vrp::TimeWindow* time_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete time_window_;
  }
  if (time_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_window);
    if (message_arena != submessage_arena) {
      time_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_window, submessage_arena);
    }
    
  } else {
    
  }
  time_window_ = time_window;
  // @@protoc_insertion_point(field_set_allocated:localsolver_vrp.Vehicle.time_window)
}

// repeated .localsolver_vrp.Rest rests = 5;
inline int Vehicle::_internal_rests_size() const {
  return rests_.size();
}
inline int Vehicle::rests_size() const {
  return _internal_rests_size();
}
inline void Vehicle::clear_rests() {
  rests_.Clear();
}
inline ::localsolver_vrp::Rest* Vehicle::mutable_rests(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Vehicle.rests)
  return rests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Rest >*
Vehicle::mutable_rests() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Vehicle.rests)
  return &rests_;
}
inline const ::localsolver_vrp::Rest& Vehicle::_internal_rests(int index) const {
  return rests_.Get(index);
}
inline const ::localsolver_vrp::Rest& Vehicle::rests(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.rests)
  return _internal_rests(index);
}
inline ::localsolver_vrp::Rest* Vehicle::_internal_add_rests() {
  return rests_.Add();
}
inline ::localsolver_vrp::Rest* Vehicle::add_rests() {
  // @@protoc_insertion_point(field_add:localsolver_vrp.Vehicle.rests)
  return _internal_add_rests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Rest >&
Vehicle::rests() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Vehicle.rests)
  return rests_;
}

// float cost_fixed = 6;
inline void Vehicle::clear_cost_fixed() {
  cost_fixed_ = 0;
}
inline float Vehicle::_internal_cost_fixed() const {
  return cost_fixed_;
}
inline float Vehicle::cost_fixed() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.cost_fixed)
  return _internal_cost_fixed();
}
inline void Vehicle::_internal_set_cost_fixed(float value) {
  
  cost_fixed_ = value;
}
inline void Vehicle::set_cost_fixed(float value) {
  _internal_set_cost_fixed(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.cost_fixed)
}

// float cost_distance_multiplier = 7;
inline void Vehicle::clear_cost_distance_multiplier() {
  cost_distance_multiplier_ = 0;
}
inline float Vehicle::_internal_cost_distance_multiplier() const {
  return cost_distance_multiplier_;
}
inline float Vehicle::cost_distance_multiplier() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.cost_distance_multiplier)
  return _internal_cost_distance_multiplier();
}
inline void Vehicle::_internal_set_cost_distance_multiplier(float value) {
  
  cost_distance_multiplier_ = value;
}
inline void Vehicle::set_cost_distance_multiplier(float value) {
  _internal_set_cost_distance_multiplier(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.cost_distance_multiplier)
}

// float cost_time_multiplier = 8;
inline void Vehicle::clear_cost_time_multiplier() {
  cost_time_multiplier_ = 0;
}
inline float Vehicle::_internal_cost_time_multiplier() const {
  return cost_time_multiplier_;
}
inline float Vehicle::cost_time_multiplier() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.cost_time_multiplier)
  return _internal_cost_time_multiplier();
}
inline void Vehicle::_internal_set_cost_time_multiplier(float value) {
  
  cost_time_multiplier_ = value;
}
inline void Vehicle::set_cost_time_multiplier(float value) {
  _internal_set_cost_time_multiplier(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.cost_time_multiplier)
}

// float cost_waiting_time_multiplier = 9;
inline void Vehicle::clear_cost_waiting_time_multiplier() {
  cost_waiting_time_multiplier_ = 0;
}
inline float Vehicle::_internal_cost_waiting_time_multiplier() const {
  return cost_waiting_time_multiplier_;
}
inline float Vehicle::cost_waiting_time_multiplier() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.cost_waiting_time_multiplier)
  return _internal_cost_waiting_time_multiplier();
}
inline void Vehicle::_internal_set_cost_waiting_time_multiplier(float value) {
  
  cost_waiting_time_multiplier_ = value;
}
inline void Vehicle::set_cost_waiting_time_multiplier(float value) {
  _internal_set_cost_waiting_time_multiplier(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.cost_waiting_time_multiplier)
}

// uint32 matrix_index = 10;
inline void Vehicle::clear_matrix_index() {
  matrix_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::_internal_matrix_index() const {
  return matrix_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::matrix_index() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.matrix_index)
  return _internal_matrix_index();
}
inline void Vehicle::_internal_set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  matrix_index_ = value;
}
inline void Vehicle::set_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matrix_index(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.matrix_index)
}

// sint32 start_index = 11;
inline void Vehicle::clear_start_index() {
  start_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle::_internal_start_index() const {
  return start_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle::start_index() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.start_index)
  return _internal_start_index();
}
inline void Vehicle::_internal_set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_index_ = value;
}
inline void Vehicle::set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.start_index)
}

// sint32 end_index = 12;
inline void Vehicle::clear_end_index() {
  end_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle::_internal_end_index() const {
  return end_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle::end_index() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.end_index)
  return _internal_end_index();
}
inline void Vehicle::_internal_set_end_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_index_ = value;
}
inline void Vehicle::set_end_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_index(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.end_index)
}

// uint32 duration = 13;
inline void Vehicle::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::duration() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.duration)
  return _internal_duration();
}
inline void Vehicle::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void Vehicle::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.duration)
}

// string shift_preference = 14;
inline void Vehicle::clear_shift_preference() {
  shift_preference_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vehicle::shift_preference() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.shift_preference)
  return _internal_shift_preference();
}
inline void Vehicle::set_shift_preference(const std::string& value) {
  _internal_set_shift_preference(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.shift_preference)
}
inline std::string* Vehicle::mutable_shift_preference() {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Vehicle.shift_preference)
  return _internal_mutable_shift_preference();
}
inline const std::string& Vehicle::_internal_shift_preference() const {
  return shift_preference_.Get();
}
inline void Vehicle::_internal_set_shift_preference(const std::string& value) {
  
  shift_preference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vehicle::set_shift_preference(std::string&& value) {
  
  shift_preference_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:localsolver_vrp.Vehicle.shift_preference)
}
inline void Vehicle::set_shift_preference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shift_preference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:localsolver_vrp.Vehicle.shift_preference)
}
inline void Vehicle::set_shift_preference(const char* value,
    size_t size) {
  
  shift_preference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:localsolver_vrp.Vehicle.shift_preference)
}
inline std::string* Vehicle::_internal_mutable_shift_preference() {
  
  return shift_preference_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vehicle::release_shift_preference() {
  // @@protoc_insertion_point(field_release:localsolver_vrp.Vehicle.shift_preference)
  return shift_preference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vehicle::set_allocated_shift_preference(std::string* shift_preference) {
  if (shift_preference != nullptr) {
    
  } else {
    
  }
  shift_preference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shift_preference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:localsolver_vrp.Vehicle.shift_preference)
}
inline std::string* Vehicle::unsafe_arena_release_shift_preference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:localsolver_vrp.Vehicle.shift_preference)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return shift_preference_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Vehicle::unsafe_arena_set_allocated_shift_preference(
    std::string* shift_preference) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shift_preference != nullptr) {
    
  } else {
    
  }
  shift_preference_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shift_preference, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localsolver_vrp.Vehicle.shift_preference)
}

// float cost_late_multiplier = 15;
inline void Vehicle::clear_cost_late_multiplier() {
  cost_late_multiplier_ = 0;
}
inline float Vehicle::_internal_cost_late_multiplier() const {
  return cost_late_multiplier_;
}
inline float Vehicle::cost_late_multiplier() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.cost_late_multiplier)
  return _internal_cost_late_multiplier();
}
inline void Vehicle::_internal_set_cost_late_multiplier(float value) {
  
  cost_late_multiplier_ = value;
}
inline void Vehicle::set_cost_late_multiplier(float value) {
  _internal_set_cost_late_multiplier(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.cost_late_multiplier)
}

// sint32 day_index = 16;
inline void Vehicle::clear_day_index() {
  day_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle::_internal_day_index() const {
  return day_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle::day_index() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.day_index)
  return _internal_day_index();
}
inline void Vehicle::_internal_set_day_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_index_ = value;
}
inline void Vehicle::set_day_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day_index(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.day_index)
}

// uint32 value_matrix_index = 17;
inline void Vehicle::clear_value_matrix_index() {
  value_matrix_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::_internal_value_matrix_index() const {
  return value_matrix_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::value_matrix_index() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.value_matrix_index)
  return _internal_value_matrix_index();
}
inline void Vehicle::_internal_set_value_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_matrix_index_ = value;
}
inline void Vehicle::set_value_matrix_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value_matrix_index(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.value_matrix_index)
}

// float cost_value_multiplier = 18;
inline void Vehicle::clear_cost_value_multiplier() {
  cost_value_multiplier_ = 0;
}
inline float Vehicle::_internal_cost_value_multiplier() const {
  return cost_value_multiplier_;
}
inline float Vehicle::cost_value_multiplier() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.cost_value_multiplier)
  return _internal_cost_value_multiplier();
}
inline void Vehicle::_internal_set_cost_value_multiplier(float value) {
  
  cost_value_multiplier_ = value;
}
inline void Vehicle::set_cost_value_multiplier(float value) {
  _internal_set_cost_value_multiplier(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.cost_value_multiplier)
}

// uint32 max_ride_time = 19;
inline void Vehicle::clear_max_ride_time() {
  max_ride_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::_internal_max_ride_time() const {
  return max_ride_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::max_ride_time() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.max_ride_time)
  return _internal_max_ride_time();
}
inline void Vehicle::_internal_set_max_ride_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_ride_time_ = value;
}
inline void Vehicle::set_max_ride_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ride_time(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.max_ride_time)
}

// uint32 max_ride_distance = 20;
inline void Vehicle::clear_max_ride_distance() {
  max_ride_distance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::_internal_max_ride_distance() const {
  return max_ride_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::max_ride_distance() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.max_ride_distance)
  return _internal_max_ride_distance();
}
inline void Vehicle::_internal_set_max_ride_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_ride_distance_ = value;
}
inline void Vehicle::set_max_ride_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ride_distance(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.max_ride_distance)
}

// uint32 distance = 22;
inline void Vehicle::clear_distance() {
  distance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::_internal_distance() const {
  return distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::distance() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.distance)
  return _internal_distance();
}
inline void Vehicle::_internal_set_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  distance_ = value;
}
inline void Vehicle::set_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.distance)
}

// float coef_service = 23;
inline void Vehicle::clear_coef_service() {
  coef_service_ = 0;
}
inline float Vehicle::_internal_coef_service() const {
  return coef_service_;
}
inline float Vehicle::coef_service() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.coef_service)
  return _internal_coef_service();
}
inline void Vehicle::_internal_set_coef_service(float value) {
  
  coef_service_ = value;
}
inline void Vehicle::set_coef_service(float value) {
  _internal_set_coef_service(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.coef_service)
}

// float coef_setup = 24;
inline void Vehicle::clear_coef_setup() {
  coef_setup_ = 0;
}
inline float Vehicle::_internal_coef_setup() const {
  return coef_setup_;
}
inline float Vehicle::coef_setup() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.coef_setup)
  return _internal_coef_setup();
}
inline void Vehicle::_internal_set_coef_setup(float value) {
  
  coef_setup_ = value;
}
inline void Vehicle::set_coef_setup(float value) {
  _internal_set_coef_setup(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.coef_setup)
}

// uint32 additional_service = 25;
inline void Vehicle::clear_additional_service() {
  additional_service_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::_internal_additional_service() const {
  return additional_service_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::additional_service() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.additional_service)
  return _internal_additional_service();
}
inline void Vehicle::_internal_set_additional_service(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  additional_service_ = value;
}
inline void Vehicle::set_additional_service(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_additional_service(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.additional_service)
}

// uint32 additional_setup = 26;
inline void Vehicle::clear_additional_setup() {
  additional_setup_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::_internal_additional_setup() const {
  return additional_setup_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vehicle::additional_setup() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.additional_setup)
  return _internal_additional_setup();
}
inline void Vehicle::_internal_set_additional_setup(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  additional_setup_ = value;
}
inline void Vehicle::set_additional_setup(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_additional_setup(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.additional_setup)
}

// bool free_approach = 27;
inline void Vehicle::clear_free_approach() {
  free_approach_ = false;
}
inline bool Vehicle::_internal_free_approach() const {
  return free_approach_;
}
inline bool Vehicle::free_approach() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.free_approach)
  return _internal_free_approach();
}
inline void Vehicle::_internal_set_free_approach(bool value) {
  
  free_approach_ = value;
}
inline void Vehicle::set_free_approach(bool value) {
  _internal_set_free_approach(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.free_approach)
}

// bool free_return = 28;
inline void Vehicle::clear_free_return() {
  free_return_ = false;
}
inline bool Vehicle::_internal_free_return() const {
  return free_return_;
}
inline bool Vehicle::free_return() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Vehicle.free_return)
  return _internal_free_return();
}
inline void Vehicle::_internal_set_free_return(bool value) {
  
  free_return_ = value;
}
inline void Vehicle::set_free_return(bool value) {
  _internal_set_free_return(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Vehicle.free_return)
}

// -------------------------------------------------------------------

// Relation

// string type = 1;
inline void Relation::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Relation::type() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Relation.type)
  return _internal_type();
}
inline void Relation::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Relation.type)
}
inline std::string* Relation::mutable_type() {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Relation.type)
  return _internal_mutable_type();
}
inline const std::string& Relation::_internal_type() const {
  return type_.Get();
}
inline void Relation::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Relation::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:localsolver_vrp.Relation.type)
}
inline void Relation::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:localsolver_vrp.Relation.type)
}
inline void Relation::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:localsolver_vrp.Relation.type)
}
inline std::string* Relation::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Relation::release_type() {
  // @@protoc_insertion_point(field_release:localsolver_vrp.Relation.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Relation::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:localsolver_vrp.Relation.type)
}
inline std::string* Relation::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:localsolver_vrp.Relation.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Relation::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localsolver_vrp.Relation.type)
}

// repeated string linked_ids = 2;
inline int Relation::_internal_linked_ids_size() const {
  return linked_ids_.size();
}
inline int Relation::linked_ids_size() const {
  return _internal_linked_ids_size();
}
inline void Relation::clear_linked_ids() {
  linked_ids_.Clear();
}
inline std::string* Relation::add_linked_ids() {
  // @@protoc_insertion_point(field_add_mutable:localsolver_vrp.Relation.linked_ids)
  return _internal_add_linked_ids();
}
inline const std::string& Relation::_internal_linked_ids(int index) const {
  return linked_ids_.Get(index);
}
inline const std::string& Relation::linked_ids(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Relation.linked_ids)
  return _internal_linked_ids(index);
}
inline std::string* Relation::mutable_linked_ids(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Relation.linked_ids)
  return linked_ids_.Mutable(index);
}
inline void Relation::set_linked_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:localsolver_vrp.Relation.linked_ids)
  linked_ids_.Mutable(index)->assign(value);
}
inline void Relation::set_linked_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:localsolver_vrp.Relation.linked_ids)
  linked_ids_.Mutable(index)->assign(std::move(value));
}
inline void Relation::set_linked_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  linked_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:localsolver_vrp.Relation.linked_ids)
}
inline void Relation::set_linked_ids(int index, const char* value, size_t size) {
  linked_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:localsolver_vrp.Relation.linked_ids)
}
inline std::string* Relation::_internal_add_linked_ids() {
  return linked_ids_.Add();
}
inline void Relation::add_linked_ids(const std::string& value) {
  linked_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:localsolver_vrp.Relation.linked_ids)
}
inline void Relation::add_linked_ids(std::string&& value) {
  linked_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:localsolver_vrp.Relation.linked_ids)
}
inline void Relation::add_linked_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  linked_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:localsolver_vrp.Relation.linked_ids)
}
inline void Relation::add_linked_ids(const char* value, size_t size) {
  linked_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:localsolver_vrp.Relation.linked_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Relation::linked_ids() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Relation.linked_ids)
  return linked_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Relation::mutable_linked_ids() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Relation.linked_ids)
  return &linked_ids_;
}

// uint32 lapse = 3;
inline void Relation::clear_lapse() {
  lapse_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Relation::_internal_lapse() const {
  return lapse_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Relation::lapse() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Relation.lapse)
  return _internal_lapse();
}
inline void Relation::_internal_set_lapse(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lapse_ = value;
}
inline void Relation::set_lapse(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lapse(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Relation.lapse)
}

// repeated string linked_vehicle_ids = 4;
inline int Relation::_internal_linked_vehicle_ids_size() const {
  return linked_vehicle_ids_.size();
}
inline int Relation::linked_vehicle_ids_size() const {
  return _internal_linked_vehicle_ids_size();
}
inline void Relation::clear_linked_vehicle_ids() {
  linked_vehicle_ids_.Clear();
}
inline std::string* Relation::add_linked_vehicle_ids() {
  // @@protoc_insertion_point(field_add_mutable:localsolver_vrp.Relation.linked_vehicle_ids)
  return _internal_add_linked_vehicle_ids();
}
inline const std::string& Relation::_internal_linked_vehicle_ids(int index) const {
  return linked_vehicle_ids_.Get(index);
}
inline const std::string& Relation::linked_vehicle_ids(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Relation.linked_vehicle_ids)
  return _internal_linked_vehicle_ids(index);
}
inline std::string* Relation::mutable_linked_vehicle_ids(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Relation.linked_vehicle_ids)
  return linked_vehicle_ids_.Mutable(index);
}
inline void Relation::set_linked_vehicle_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:localsolver_vrp.Relation.linked_vehicle_ids)
  linked_vehicle_ids_.Mutable(index)->assign(value);
}
inline void Relation::set_linked_vehicle_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:localsolver_vrp.Relation.linked_vehicle_ids)
  linked_vehicle_ids_.Mutable(index)->assign(std::move(value));
}
inline void Relation::set_linked_vehicle_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  linked_vehicle_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:localsolver_vrp.Relation.linked_vehicle_ids)
}
inline void Relation::set_linked_vehicle_ids(int index, const char* value, size_t size) {
  linked_vehicle_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:localsolver_vrp.Relation.linked_vehicle_ids)
}
inline std::string* Relation::_internal_add_linked_vehicle_ids() {
  return linked_vehicle_ids_.Add();
}
inline void Relation::add_linked_vehicle_ids(const std::string& value) {
  linked_vehicle_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:localsolver_vrp.Relation.linked_vehicle_ids)
}
inline void Relation::add_linked_vehicle_ids(std::string&& value) {
  linked_vehicle_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:localsolver_vrp.Relation.linked_vehicle_ids)
}
inline void Relation::add_linked_vehicle_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  linked_vehicle_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:localsolver_vrp.Relation.linked_vehicle_ids)
}
inline void Relation::add_linked_vehicle_ids(const char* value, size_t size) {
  linked_vehicle_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:localsolver_vrp.Relation.linked_vehicle_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Relation::linked_vehicle_ids() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Relation.linked_vehicle_ids)
  return linked_vehicle_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Relation::mutable_linked_vehicle_ids() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Relation.linked_vehicle_ids)
  return &linked_vehicle_ids_;
}

// -------------------------------------------------------------------

// Route

// string vehicle_id = 1;
inline void Route::clear_vehicle_id() {
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Route::vehicle_id() const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Route.vehicle_id)
  return _internal_vehicle_id();
}
inline void Route::set_vehicle_id(const std::string& value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:localsolver_vrp.Route.vehicle_id)
}
inline std::string* Route::mutable_vehicle_id() {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Route.vehicle_id)
  return _internal_mutable_vehicle_id();
}
inline const std::string& Route::_internal_vehicle_id() const {
  return vehicle_id_.Get();
}
inline void Route::_internal_set_vehicle_id(const std::string& value) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Route::set_vehicle_id(std::string&& value) {
  
  vehicle_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:localsolver_vrp.Route.vehicle_id)
}
inline void Route::set_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:localsolver_vrp.Route.vehicle_id)
}
inline void Route::set_vehicle_id(const char* value,
    size_t size) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:localsolver_vrp.Route.vehicle_id)
}
inline std::string* Route::_internal_mutable_vehicle_id() {
  
  return vehicle_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Route::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:localsolver_vrp.Route.vehicle_id)
  return vehicle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Route::set_allocated_vehicle_id(std::string* vehicle_id) {
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:localsolver_vrp.Route.vehicle_id)
}
inline std::string* Route::unsafe_arena_release_vehicle_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:localsolver_vrp.Route.vehicle_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vehicle_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Route::unsafe_arena_set_allocated_vehicle_id(
    std::string* vehicle_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vehicle_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localsolver_vrp.Route.vehicle_id)
}

// repeated string service_ids = 2;
inline int Route::_internal_service_ids_size() const {
  return service_ids_.size();
}
inline int Route::service_ids_size() const {
  return _internal_service_ids_size();
}
inline void Route::clear_service_ids() {
  service_ids_.Clear();
}
inline std::string* Route::add_service_ids() {
  // @@protoc_insertion_point(field_add_mutable:localsolver_vrp.Route.service_ids)
  return _internal_add_service_ids();
}
inline const std::string& Route::_internal_service_ids(int index) const {
  return service_ids_.Get(index);
}
inline const std::string& Route::service_ids(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Route.service_ids)
  return _internal_service_ids(index);
}
inline std::string* Route::mutable_service_ids(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Route.service_ids)
  return service_ids_.Mutable(index);
}
inline void Route::set_service_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:localsolver_vrp.Route.service_ids)
  service_ids_.Mutable(index)->assign(value);
}
inline void Route::set_service_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:localsolver_vrp.Route.service_ids)
  service_ids_.Mutable(index)->assign(std::move(value));
}
inline void Route::set_service_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:localsolver_vrp.Route.service_ids)
}
inline void Route::set_service_ids(int index, const char* value, size_t size) {
  service_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:localsolver_vrp.Route.service_ids)
}
inline std::string* Route::_internal_add_service_ids() {
  return service_ids_.Add();
}
inline void Route::add_service_ids(const std::string& value) {
  service_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:localsolver_vrp.Route.service_ids)
}
inline void Route::add_service_ids(std::string&& value) {
  service_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:localsolver_vrp.Route.service_ids)
}
inline void Route::add_service_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:localsolver_vrp.Route.service_ids)
}
inline void Route::add_service_ids(const char* value, size_t size) {
  service_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:localsolver_vrp.Route.service_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Route::service_ids() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Route.service_ids)
  return service_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Route::mutable_service_ids() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Route.service_ids)
  return &service_ids_;
}

// -------------------------------------------------------------------

// Problem

// repeated .localsolver_vrp.Vehicle vehicles = 3;
inline int Problem::_internal_vehicles_size() const {
  return vehicles_.size();
}
inline int Problem::vehicles_size() const {
  return _internal_vehicles_size();
}
inline void Problem::clear_vehicles() {
  vehicles_.Clear();
}
inline ::localsolver_vrp::Vehicle* Problem::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Problem.vehicles)
  return vehicles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Vehicle >*
Problem::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Problem.vehicles)
  return &vehicles_;
}
inline const ::localsolver_vrp::Vehicle& Problem::_internal_vehicles(int index) const {
  return vehicles_.Get(index);
}
inline const ::localsolver_vrp::Vehicle& Problem::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Problem.vehicles)
  return _internal_vehicles(index);
}
inline ::localsolver_vrp::Vehicle* Problem::_internal_add_vehicles() {
  return vehicles_.Add();
}
inline ::localsolver_vrp::Vehicle* Problem::add_vehicles() {
  // @@protoc_insertion_point(field_add:localsolver_vrp.Problem.vehicles)
  return _internal_add_vehicles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Vehicle >&
Problem::vehicles() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Problem.vehicles)
  return vehicles_;
}

// repeated .localsolver_vrp.Service services = 4;
inline int Problem::_internal_services_size() const {
  return services_.size();
}
inline int Problem::services_size() const {
  return _internal_services_size();
}
inline void Problem::clear_services() {
  services_.Clear();
}
inline ::localsolver_vrp::Service* Problem::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Problem.services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Service >*
Problem::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Problem.services)
  return &services_;
}
inline const ::localsolver_vrp::Service& Problem::_internal_services(int index) const {
  return services_.Get(index);
}
inline const ::localsolver_vrp::Service& Problem::services(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Problem.services)
  return _internal_services(index);
}
inline ::localsolver_vrp::Service* Problem::_internal_add_services() {
  return services_.Add();
}
inline ::localsolver_vrp::Service* Problem::add_services() {
  // @@protoc_insertion_point(field_add:localsolver_vrp.Problem.services)
  return _internal_add_services();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Service >&
Problem::services() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Problem.services)
  return services_;
}

// repeated .localsolver_vrp.Matrix matrices = 5;
inline int Problem::_internal_matrices_size() const {
  return matrices_.size();
}
inline int Problem::matrices_size() const {
  return _internal_matrices_size();
}
inline void Problem::clear_matrices() {
  matrices_.Clear();
}
inline ::localsolver_vrp::Matrix* Problem::mutable_matrices(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Problem.matrices)
  return matrices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Matrix >*
Problem::mutable_matrices() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Problem.matrices)
  return &matrices_;
}
inline const ::localsolver_vrp::Matrix& Problem::_internal_matrices(int index) const {
  return matrices_.Get(index);
}
inline const ::localsolver_vrp::Matrix& Problem::matrices(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Problem.matrices)
  return _internal_matrices(index);
}
inline ::localsolver_vrp::Matrix* Problem::_internal_add_matrices() {
  return matrices_.Add();
}
inline ::localsolver_vrp::Matrix* Problem::add_matrices() {
  // @@protoc_insertion_point(field_add:localsolver_vrp.Problem.matrices)
  return _internal_add_matrices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Matrix >&
Problem::matrices() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Problem.matrices)
  return matrices_;
}

// repeated .localsolver_vrp.Relation relations = 6;
inline int Problem::_internal_relations_size() const {
  return relations_.size();
}
inline int Problem::relations_size() const {
  return _internal_relations_size();
}
inline void Problem::clear_relations() {
  relations_.Clear();
}
inline ::localsolver_vrp::Relation* Problem::mutable_relations(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Problem.relations)
  return relations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Relation >*
Problem::mutable_relations() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Problem.relations)
  return &relations_;
}
inline const ::localsolver_vrp::Relation& Problem::_internal_relations(int index) const {
  return relations_.Get(index);
}
inline const ::localsolver_vrp::Relation& Problem::relations(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Problem.relations)
  return _internal_relations(index);
}
inline ::localsolver_vrp::Relation* Problem::_internal_add_relations() {
  return relations_.Add();
}
inline ::localsolver_vrp::Relation* Problem::add_relations() {
  // @@protoc_insertion_point(field_add:localsolver_vrp.Problem.relations)
  return _internal_add_relations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Relation >&
Problem::relations() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Problem.relations)
  return relations_;
}

// repeated .localsolver_vrp.Route routes = 7;
inline int Problem::_internal_routes_size() const {
  return routes_.size();
}
inline int Problem::routes_size() const {
  return _internal_routes_size();
}
inline void Problem::clear_routes() {
  routes_.Clear();
}
inline ::localsolver_vrp::Route* Problem::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:localsolver_vrp.Problem.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Route >*
Problem::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:localsolver_vrp.Problem.routes)
  return &routes_;
}
inline const ::localsolver_vrp::Route& Problem::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::localsolver_vrp::Route& Problem::routes(int index) const {
  // @@protoc_insertion_point(field_get:localsolver_vrp.Problem.routes)
  return _internal_routes(index);
}
inline ::localsolver_vrp::Route* Problem::_internal_add_routes() {
  return routes_.Add();
}
inline ::localsolver_vrp::Route* Problem::add_routes() {
  // @@protoc_insertion_point(field_add:localsolver_vrp.Problem.routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localsolver_vrp::Route >&
Problem::routes() const {
  // @@protoc_insertion_point(field_list:localsolver_vrp.Problem.routes)
  return routes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace localsolver_vrp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_localsolver_5fvrp_2eproto
