// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localsolver_vrp.proto

#include "localsolver_vrp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_localsolver_5fvrp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Capacity_localsolver_5fvrp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localsolver_5fvrp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Matrix_localsolver_5fvrp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localsolver_5fvrp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Relation_localsolver_5fvrp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localsolver_5fvrp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rest_localsolver_5fvrp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localsolver_5fvrp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Route_localsolver_5fvrp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localsolver_5fvrp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Service_localsolver_5fvrp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localsolver_5fvrp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeWindow_localsolver_5fvrp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_localsolver_5fvrp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Vehicle_localsolver_5fvrp_2eproto;
namespace localsolver_vrp {
class MatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Matrix> _instance;
} _Matrix_default_instance_;
class TimeWindowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeWindow> _instance;
} _TimeWindow_default_instance_;
class ServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Service> _instance;
} _Service_default_instance_;
class RestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rest> _instance;
} _Rest_default_instance_;
class CapacityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Capacity> _instance;
} _Capacity_default_instance_;
class VehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle> _instance;
} _Vehicle_default_instance_;
class RelationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Relation> _instance;
} _Relation_default_instance_;
class RouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Route> _instance;
} _Route_default_instance_;
class ProblemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Problem> _instance;
} _Problem_default_instance_;
}  // namespace localsolver_vrp
static void InitDefaultsscc_info_Capacity_localsolver_5fvrp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localsolver_vrp::_Capacity_default_instance_;
    new (ptr) ::localsolver_vrp::Capacity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localsolver_vrp::Capacity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Capacity_localsolver_5fvrp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Capacity_localsolver_5fvrp_2eproto}, {}};

static void InitDefaultsscc_info_Matrix_localsolver_5fvrp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localsolver_vrp::_Matrix_default_instance_;
    new (ptr) ::localsolver_vrp::Matrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localsolver_vrp::Matrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Matrix_localsolver_5fvrp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Matrix_localsolver_5fvrp_2eproto}, {}};

static void InitDefaultsscc_info_Problem_localsolver_5fvrp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localsolver_vrp::_Problem_default_instance_;
    new (ptr) ::localsolver_vrp::Problem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localsolver_vrp::Problem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Problem_localsolver_5fvrp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Problem_localsolver_5fvrp_2eproto}, {
      &scc_info_Vehicle_localsolver_5fvrp_2eproto.base,
      &scc_info_Service_localsolver_5fvrp_2eproto.base,
      &scc_info_Matrix_localsolver_5fvrp_2eproto.base,
      &scc_info_Relation_localsolver_5fvrp_2eproto.base,
      &scc_info_Route_localsolver_5fvrp_2eproto.base,}};

static void InitDefaultsscc_info_Relation_localsolver_5fvrp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localsolver_vrp::_Relation_default_instance_;
    new (ptr) ::localsolver_vrp::Relation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localsolver_vrp::Relation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Relation_localsolver_5fvrp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Relation_localsolver_5fvrp_2eproto}, {}};

static void InitDefaultsscc_info_Rest_localsolver_5fvrp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localsolver_vrp::_Rest_default_instance_;
    new (ptr) ::localsolver_vrp::Rest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localsolver_vrp::Rest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rest_localsolver_5fvrp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Rest_localsolver_5fvrp_2eproto}, {
      &scc_info_TimeWindow_localsolver_5fvrp_2eproto.base,}};

static void InitDefaultsscc_info_Route_localsolver_5fvrp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localsolver_vrp::_Route_default_instance_;
    new (ptr) ::localsolver_vrp::Route();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localsolver_vrp::Route::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Route_localsolver_5fvrp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Route_localsolver_5fvrp_2eproto}, {}};

static void InitDefaultsscc_info_Service_localsolver_5fvrp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localsolver_vrp::_Service_default_instance_;
    new (ptr) ::localsolver_vrp::Service();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localsolver_vrp::Service::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Service_localsolver_5fvrp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Service_localsolver_5fvrp_2eproto}, {
      &scc_info_TimeWindow_localsolver_5fvrp_2eproto.base,}};

static void InitDefaultsscc_info_TimeWindow_localsolver_5fvrp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localsolver_vrp::_TimeWindow_default_instance_;
    new (ptr) ::localsolver_vrp::TimeWindow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localsolver_vrp::TimeWindow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeWindow_localsolver_5fvrp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeWindow_localsolver_5fvrp_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle_localsolver_5fvrp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localsolver_vrp::_Vehicle_default_instance_;
    new (ptr) ::localsolver_vrp::Vehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localsolver_vrp::Vehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Vehicle_localsolver_5fvrp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Vehicle_localsolver_5fvrp_2eproto}, {
      &scc_info_Capacity_localsolver_5fvrp_2eproto.base,
      &scc_info_TimeWindow_localsolver_5fvrp_2eproto.base,
      &scc_info_Rest_localsolver_5fvrp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_localsolver_5fvrp_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_localsolver_5fvrp_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_localsolver_5fvrp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_localsolver_5fvrp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Matrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Matrix, time_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Matrix, distance_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Matrix, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::TimeWindow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::TimeWindow, start_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::TimeWindow, end_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::TimeWindow, maximum_lateness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, time_windows_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, quantities_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, duration_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, priority_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, vehicle_indices_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, matrix_index_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, setup_duration_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, id_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, late_multiplier_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, setup_quantities_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, additional_value_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, exclusion_cost_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, refill_quantities_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Service, problem_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Rest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Rest, time_window_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Rest, duration_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Rest, id_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Rest, late_multiplier_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Rest, exclusion_cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Capacity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Capacity, limit_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Capacity, overload_multiplier_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Capacity, counting_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Capacity, initial_limit_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Capacity, initial_load_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, id_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, capacities_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, time_window_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, rests_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, cost_fixed_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, cost_distance_multiplier_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, cost_time_multiplier_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, cost_waiting_time_multiplier_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, matrix_index_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, start_index_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, end_index_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, duration_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, shift_preference_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, cost_late_multiplier_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, day_index_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, value_matrix_index_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, cost_value_multiplier_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, max_ride_time_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, max_ride_distance_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, distance_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, coef_service_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, coef_setup_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, additional_service_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, additional_setup_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, free_approach_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Vehicle, free_return_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Relation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Relation, type_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Relation, linked_ids_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Relation, lapse_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Relation, linked_vehicle_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Route, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Route, service_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Problem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Problem, vehicles_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Problem, services_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Problem, matrices_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Problem, relations_),
  PROTOBUF_FIELD_OFFSET(::localsolver_vrp::Problem, routes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::localsolver_vrp::Matrix)},
  { 8, -1, sizeof(::localsolver_vrp::TimeWindow)},
  { 16, -1, sizeof(::localsolver_vrp::Service)},
  { 35, -1, sizeof(::localsolver_vrp::Rest)},
  { 45, -1, sizeof(::localsolver_vrp::Capacity)},
  { 55, -1, sizeof(::localsolver_vrp::Vehicle)},
  { 86, -1, sizeof(::localsolver_vrp::Relation)},
  { 95, -1, sizeof(::localsolver_vrp::Route)},
  { 102, -1, sizeof(::localsolver_vrp::Problem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localsolver_vrp::_Matrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localsolver_vrp::_TimeWindow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localsolver_vrp::_Service_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localsolver_vrp::_Rest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localsolver_vrp::_Capacity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localsolver_vrp::_Vehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localsolver_vrp::_Relation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localsolver_vrp::_Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localsolver_vrp::_Problem_default_instance_),
};

const char descriptor_table_protodef_localsolver_5fvrp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025localsolver_vrp.proto\022\017localsolver_vrp"
  "\"C\n\006Matrix\022\020\n\004time\030\002 \003(\002B\002\020\001\022\024\n\010distance"
  "\030\003 \003(\002B\002\020\001\022\021\n\005value\030\004 \003(\002B\002\020\001\"B\n\nTimeWin"
  "dow\022\r\n\005start\030\001 \001(\r\022\013\n\003end\030\002 \001(\r\022\030\n\020maxim"
  "um_lateness\030\003 \001(\r\"\336\002\n\007Service\0221\n\014time_wi"
  "ndows\030\001 \003(\0132\033.localsolver_vrp.TimeWindow"
  "\022\022\n\nquantities\030\002 \003(\002\022\020\n\010duration\030\003 \001(\r\022\020"
  "\n\010priority\030\004 \001(\r\022\027\n\017vehicle_indices\030\005 \003("
  "\r\022\024\n\014matrix_index\030\006 \001(\r\022\026\n\016setup_duratio"
  "n\030\007 \001(\r\022\n\n\002id\030\t \001(\t\022\027\n\017late_multiplier\030\n"
  " \001(\002\022\030\n\020setup_quantities\030\013 \003(\002\022\030\n\020additi"
  "onal_value\030\014 \001(\r\022\026\n\016exclusion_cost\030\r \001(\002"
  "\022\031\n\021refill_quantities\030\016 \003(\010\022\025\n\rproblem_i"
  "ndex\030\017 \001(\r\"\207\001\n\004Rest\0220\n\013time_window\030\001 \001(\013"
  "2\033.localsolver_vrp.TimeWindow\022\020\n\010duratio"
  "n\030\002 \001(\r\022\n\n\002id\030\003 \001(\t\022\027\n\017late_multiplier\030\004"
  " \001(\002\022\026\n\016exclusion_cost\030\005 \001(\002\"u\n\010Capacity"
  "\022\r\n\005limit\030\001 \001(\002\022\033\n\023overload_multiplier\030\002"
  " \001(\002\022\020\n\010counting\030\003 \001(\010\022\025\n\rinitial_limit\030"
  "\004 \001(\002\022\024\n\014initial_load\030\005 \001(\002\"\274\005\n\007Vehicle\022"
  "\n\n\002id\030\001 \001(\t\022-\n\ncapacities\030\003 \003(\0132\031.locals"
  "olver_vrp.Capacity\0220\n\013time_window\030\004 \001(\0132"
  "\033.localsolver_vrp.TimeWindow\022$\n\005rests\030\005 "
  "\003(\0132\025.localsolver_vrp.Rest\022\022\n\ncost_fixed"
  "\030\006 \001(\002\022 \n\030cost_distance_multiplier\030\007 \001(\002"
  "\022\034\n\024cost_time_multiplier\030\010 \001(\002\022$\n\034cost_w"
  "aiting_time_multiplier\030\t \001(\002\022\024\n\014matrix_i"
  "ndex\030\n \001(\r\022\023\n\013start_index\030\013 \001(\021\022\021\n\tend_i"
  "ndex\030\014 \001(\021\022\020\n\010duration\030\r \001(\r\022\030\n\020shift_pr"
  "eference\030\016 \001(\t\022\034\n\024cost_late_multiplier\030\017"
  " \001(\002\022\021\n\tday_index\030\020 \001(\021\022\032\n\022value_matrix_"
  "index\030\021 \001(\r\022\035\n\025cost_value_multiplier\030\022 \001"
  "(\002\022\025\n\rmax_ride_time\030\023 \001(\r\022\031\n\021max_ride_di"
  "stance\030\024 \001(\r\022\020\n\010distance\030\026 \001(\r\022\024\n\014coef_s"
  "ervice\030\027 \001(\002\022\022\n\ncoef_setup\030\030 \001(\002\022\032\n\022addi"
  "tional_service\030\031 \001(\r\022\030\n\020additional_setup"
  "\030\032 \001(\r\022\025\n\rfree_approach\030\033 \001(\010\022\023\n\013free_re"
  "turn\030\034 \001(\010\"W\n\010Relation\022\014\n\004type\030\001 \001(\t\022\022\n\n"
  "linked_ids\030\002 \003(\t\022\r\n\005lapse\030\003 \001(\r\022\032\n\022linke"
  "d_vehicle_ids\030\004 \003(\t\"0\n\005Route\022\022\n\nvehicle_"
  "id\030\001 \001(\t\022\023\n\013service_ids\030\002 \003(\t\"\342\001\n\007Proble"
  "m\022*\n\010vehicles\030\003 \003(\0132\030.localsolver_vrp.Ve"
  "hicle\022*\n\010services\030\004 \003(\0132\030.localsolver_vr"
  "p.Service\022)\n\010matrices\030\005 \003(\0132\027.localsolve"
  "r_vrp.Matrix\022,\n\trelations\030\006 \003(\0132\031.locals"
  "olver_vrp.Relation\022&\n\006routes\030\007 \003(\0132\026.loc"
  "alsolver_vrp.RouteB\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_localsolver_5fvrp_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_localsolver_5fvrp_2eproto_sccs[9] = {
  &scc_info_Capacity_localsolver_5fvrp_2eproto.base,
  &scc_info_Matrix_localsolver_5fvrp_2eproto.base,
  &scc_info_Problem_localsolver_5fvrp_2eproto.base,
  &scc_info_Relation_localsolver_5fvrp_2eproto.base,
  &scc_info_Rest_localsolver_5fvrp_2eproto.base,
  &scc_info_Route_localsolver_5fvrp_2eproto.base,
  &scc_info_Service_localsolver_5fvrp_2eproto.base,
  &scc_info_TimeWindow_localsolver_5fvrp_2eproto.base,
  &scc_info_Vehicle_localsolver_5fvrp_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_localsolver_5fvrp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_localsolver_5fvrp_2eproto = {
  false, false, descriptor_table_protodef_localsolver_5fvrp_2eproto, "localsolver_vrp.proto", 1870,
  &descriptor_table_localsolver_5fvrp_2eproto_once, descriptor_table_localsolver_5fvrp_2eproto_sccs, descriptor_table_localsolver_5fvrp_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_localsolver_5fvrp_2eproto::offsets,
  file_level_metadata_localsolver_5fvrp_2eproto, 9, file_level_enum_descriptors_localsolver_5fvrp_2eproto, file_level_service_descriptors_localsolver_5fvrp_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_localsolver_5fvrp_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_localsolver_5fvrp_2eproto)), true);
namespace localsolver_vrp {

// ===================================================================

void Matrix::InitAsDefaultInstance() {
}
class Matrix::_Internal {
 public:
};

Matrix::Matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  time_(arena),
  distance_(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:localsolver_vrp.Matrix)
}
Matrix::Matrix(const Matrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      time_(from.time_),
      distance_(from.distance_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:localsolver_vrp.Matrix)
}

void Matrix::SharedCtor() {
}

Matrix::~Matrix() {
  // @@protoc_insertion_point(destructor:localsolver_vrp.Matrix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Matrix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Matrix::ArenaDtor(void* object) {
  Matrix* _this = reinterpret_cast< Matrix* >(object);
  (void)_this;
}
void Matrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Matrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Matrix& Matrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Matrix_localsolver_5fvrp_2eproto.base);
  return *internal_default_instance();
}


void Matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:localsolver_vrp.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.Clear();
  distance_.Clear();
  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float time = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float distance = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_distance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_distance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float value = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localsolver_vrp.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float time = 2 [packed = true];
  if (this->_internal_time_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_time(), target);
  }

  // repeated float distance = 3 [packed = true];
  if (this->_internal_distance_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_distance(), target);
  }

  // repeated float value = 4 [packed = true];
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localsolver_vrp.Matrix)
  return target;
}

size_t Matrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localsolver_vrp.Matrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float time = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_time_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float distance = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_distance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _distance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float value = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localsolver_vrp.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localsolver_vrp.Matrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localsolver_vrp.Matrix)
    MergeFrom(*source);
  }
}

void Matrix::MergeFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localsolver_vrp.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_.MergeFrom(from.time_);
  distance_.MergeFrom(from.distance_);
  value_.MergeFrom(from.value_);
}

void Matrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localsolver_vrp.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix::CopyFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localsolver_vrp.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix::IsInitialized() const {
  return true;
}

void Matrix::InternalSwap(Matrix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  time_.InternalSwap(&other->time_);
  distance_.InternalSwap(&other->distance_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeWindow::InitAsDefaultInstance() {
}
class TimeWindow::_Internal {
 public:
};

TimeWindow::TimeWindow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:localsolver_vrp.TimeWindow)
}
TimeWindow::TimeWindow(const TimeWindow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_lateness_) -
    reinterpret_cast<char*>(&start_)) + sizeof(maximum_lateness_));
  // @@protoc_insertion_point(copy_constructor:localsolver_vrp.TimeWindow)
}

void TimeWindow::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_lateness_) -
      reinterpret_cast<char*>(&start_)) + sizeof(maximum_lateness_));
}

TimeWindow::~TimeWindow() {
  // @@protoc_insertion_point(destructor:localsolver_vrp.TimeWindow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeWindow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimeWindow::ArenaDtor(void* object) {
  TimeWindow* _this = reinterpret_cast< TimeWindow* >(object);
  (void)_this;
}
void TimeWindow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeWindow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeWindow& TimeWindow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeWindow_localsolver_5fvrp_2eproto.base);
  return *internal_default_instance();
}


void TimeWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:localsolver_vrp.TimeWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_lateness_) -
      reinterpret_cast<char*>(&start_)) + sizeof(maximum_lateness_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeWindow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maximum_lateness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maximum_lateness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeWindow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localsolver_vrp.TimeWindow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start = 1;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start(), target);
  }

  // uint32 end = 2;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end(), target);
  }

  // uint32 maximum_lateness = 3;
  if (this->maximum_lateness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maximum_lateness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localsolver_vrp.TimeWindow)
  return target;
}

size_t TimeWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localsolver_vrp.TimeWindow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start());
  }

  // uint32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end());
  }

  // uint32 maximum_lateness = 3;
  if (this->maximum_lateness() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maximum_lateness());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeWindow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localsolver_vrp.TimeWindow)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeWindow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeWindow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localsolver_vrp.TimeWindow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localsolver_vrp.TimeWindow)
    MergeFrom(*source);
  }
}

void TimeWindow::MergeFrom(const TimeWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localsolver_vrp.TimeWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from.maximum_lateness() != 0) {
    _internal_set_maximum_lateness(from._internal_maximum_lateness());
  }
}

void TimeWindow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localsolver_vrp.TimeWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeWindow::CopyFrom(const TimeWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localsolver_vrp.TimeWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeWindow::IsInitialized() const {
  return true;
}

void TimeWindow::InternalSwap(TimeWindow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeWindow, maximum_lateness_)
      + sizeof(TimeWindow::maximum_lateness_)
      - PROTOBUF_FIELD_OFFSET(TimeWindow, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeWindow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Service::InitAsDefaultInstance() {
}
class Service::_Internal {
 public:
};

Service::Service(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  time_windows_(arena),
  quantities_(arena),
  vehicle_indices_(arena),
  setup_quantities_(arena),
  refill_quantities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:localsolver_vrp.Service)
}
Service::Service(const Service& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      time_windows_(from.time_windows_),
      quantities_(from.quantities_),
      vehicle_indices_(from.vehicle_indices_),
      setup_quantities_(from.setup_quantities_),
      refill_quantities_(from.refill_quantities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&problem_index_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(problem_index_));
  // @@protoc_insertion_point(copy_constructor:localsolver_vrp.Service)
}

void Service::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Service_localsolver_5fvrp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&problem_index_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(problem_index_));
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:localsolver_vrp.Service)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Service::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Service::ArenaDtor(void* object) {
  Service* _this = reinterpret_cast< Service* >(object);
  (void)_this;
}
void Service::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Service::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Service& Service::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Service_localsolver_5fvrp_2eproto.base);
  return *internal_default_instance();
}


void Service::Clear() {
// @@protoc_insertion_point(message_clear_start:localsolver_vrp.Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_windows_.Clear();
  quantities_.Clear();
  vehicle_indices_.Clear();
  setup_quantities_.Clear();
  refill_quantities_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&problem_index_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(problem_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Service::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .localsolver_vrp.TimeWindow time_windows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time_windows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float quantities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_quantities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_quantities(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 vehicle_indices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vehicle_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_vehicle_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 matrix_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          matrix_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 setup_duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          setup_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localsolver_vrp.Service.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float late_multiplier = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          late_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float setup_quantities = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_setup_quantities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          _internal_add_setup_quantities(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 additional_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          additional_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float exclusion_cost = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          exclusion_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated bool refill_quantities = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_refill_quantities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_refill_quantities(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 problem_index = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          problem_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Service::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localsolver_vrp.Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .localsolver_vrp.TimeWindow time_windows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_windows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_time_windows(i), target, stream);
  }

  // repeated float quantities = 2;
  if (this->_internal_quantities_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_quantities(), target);
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // uint32 priority = 4;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_priority(), target);
  }

  // repeated uint32 vehicle_indices = 5;
  {
    int byte_size = _vehicle_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_vehicle_indices(), byte_size, target);
    }
  }

  // uint32 matrix_index = 6;
  if (this->matrix_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_matrix_index(), target);
  }

  // uint32 setup_duration = 7;
  if (this->setup_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_setup_duration(), target);
  }

  // string id = 9;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localsolver_vrp.Service.id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_id(), target);
  }

  // float late_multiplier = 10;
  if (!(this->late_multiplier() <= 0 && this->late_multiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_late_multiplier(), target);
  }

  // repeated float setup_quantities = 11;
  if (this->_internal_setup_quantities_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_setup_quantities(), target);
  }

  // uint32 additional_value = 12;
  if (this->additional_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_additional_value(), target);
  }

  // float exclusion_cost = 13;
  if (!(this->exclusion_cost() <= 0 && this->exclusion_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_exclusion_cost(), target);
  }

  // repeated bool refill_quantities = 14;
  if (this->_internal_refill_quantities_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_refill_quantities(), target);
  }

  // uint32 problem_index = 15;
  if (this->problem_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_problem_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localsolver_vrp.Service)
  return target;
}

size_t Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localsolver_vrp.Service)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .localsolver_vrp.TimeWindow time_windows = 1;
  total_size += 1UL * this->_internal_time_windows_size();
  for (const auto& msg : this->time_windows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float quantities = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_quantities_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _quantities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 vehicle_indices = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vehicle_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vehicle_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float setup_quantities = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_setup_quantities_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _setup_quantities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool refill_quantities = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_refill_quantities_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _refill_quantities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string id = 9;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  // uint32 priority = 4;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  // uint32 matrix_index = 6;
  if (this->matrix_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_matrix_index());
  }

  // uint32 setup_duration = 7;
  if (this->setup_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_setup_duration());
  }

  // float late_multiplier = 10;
  if (!(this->late_multiplier() <= 0 && this->late_multiplier() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 additional_value = 12;
  if (this->additional_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_additional_value());
  }

  // float exclusion_cost = 13;
  if (!(this->exclusion_cost() <= 0 && this->exclusion_cost() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 problem_index = 15;
  if (this->problem_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_problem_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Service::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localsolver_vrp.Service)
  GOOGLE_DCHECK_NE(&from, this);
  const Service* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Service>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localsolver_vrp.Service)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localsolver_vrp.Service)
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localsolver_vrp.Service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_windows_.MergeFrom(from.time_windows_);
  quantities_.MergeFrom(from.quantities_);
  vehicle_indices_.MergeFrom(from.vehicle_indices_);
  setup_quantities_.MergeFrom(from.setup_quantities_);
  refill_quantities_.MergeFrom(from.refill_quantities_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.matrix_index() != 0) {
    _internal_set_matrix_index(from._internal_matrix_index());
  }
  if (from.setup_duration() != 0) {
    _internal_set_setup_duration(from._internal_setup_duration());
  }
  if (!(from.late_multiplier() <= 0 && from.late_multiplier() >= 0)) {
    _internal_set_late_multiplier(from._internal_late_multiplier());
  }
  if (from.additional_value() != 0) {
    _internal_set_additional_value(from._internal_additional_value());
  }
  if (!(from.exclusion_cost() <= 0 && from.exclusion_cost() >= 0)) {
    _internal_set_exclusion_cost(from._internal_exclusion_cost());
  }
  if (from.problem_index() != 0) {
    _internal_set_problem_index(from._internal_problem_index());
  }
}

void Service::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localsolver_vrp.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localsolver_vrp.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {
  return true;
}

void Service::InternalSwap(Service* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  time_windows_.InternalSwap(&other->time_windows_);
  quantities_.InternalSwap(&other->quantities_);
  vehicle_indices_.InternalSwap(&other->vehicle_indices_);
  setup_quantities_.InternalSwap(&other->setup_quantities_);
  refill_quantities_.InternalSwap(&other->refill_quantities_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Service, problem_index_)
      + sizeof(Service::problem_index_)
      - PROTOBUF_FIELD_OFFSET(Service, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Service::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rest::InitAsDefaultInstance() {
  ::localsolver_vrp::_Rest_default_instance_._instance.get_mutable()->time_window_ = const_cast< ::localsolver_vrp::TimeWindow*>(
      ::localsolver_vrp::TimeWindow::internal_default_instance());
}
class Rest::_Internal {
 public:
  static const ::localsolver_vrp::TimeWindow& time_window(const Rest* msg);
};

const ::localsolver_vrp::TimeWindow&
Rest::_Internal::time_window(const Rest* msg) {
  return *msg->time_window_;
}
Rest::Rest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:localsolver_vrp.Rest)
}
Rest::Rest(const Rest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_time_window()) {
    time_window_ = new ::localsolver_vrp::TimeWindow(*from.time_window_);
  } else {
    time_window_ = nullptr;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&exclusion_cost_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(exclusion_cost_));
  // @@protoc_insertion_point(copy_constructor:localsolver_vrp.Rest)
}

void Rest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rest_localsolver_5fvrp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclusion_cost_) -
      reinterpret_cast<char*>(&time_window_)) + sizeof(exclusion_cost_));
}

Rest::~Rest() {
  // @@protoc_insertion_point(destructor:localsolver_vrp.Rest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_window_;
}

void Rest::ArenaDtor(void* object) {
  Rest* _this = reinterpret_cast< Rest* >(object);
  (void)_this;
}
void Rest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rest& Rest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rest_localsolver_5fvrp_2eproto.base);
  return *internal_default_instance();
}


void Rest::Clear() {
// @@protoc_insertion_point(message_clear_start:localsolver_vrp.Rest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && time_window_ != nullptr) {
    delete time_window_;
  }
  time_window_ = nullptr;
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclusion_cost_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(exclusion_cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .localsolver_vrp.TimeWindow time_window = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_window(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localsolver_vrp.Rest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float late_multiplier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          late_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float exclusion_cost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          exclusion_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localsolver_vrp.Rest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .localsolver_vrp.TimeWindow time_window = 1;
  if (this->has_time_window()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time_window(this), target, stream);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localsolver_vrp.Rest.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // float late_multiplier = 4;
  if (!(this->late_multiplier() <= 0 && this->late_multiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_late_multiplier(), target);
  }

  // float exclusion_cost = 5;
  if (!(this->exclusion_cost() <= 0 && this->exclusion_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_exclusion_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localsolver_vrp.Rest)
  return target;
}

size_t Rest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localsolver_vrp.Rest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .localsolver_vrp.TimeWindow time_window = 1;
  if (this->has_time_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_window_);
  }

  // uint32 duration = 2;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  // float late_multiplier = 4;
  if (!(this->late_multiplier() <= 0 && this->late_multiplier() >= 0)) {
    total_size += 1 + 4;
  }

  // float exclusion_cost = 5;
  if (!(this->exclusion_cost() <= 0 && this->exclusion_cost() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localsolver_vrp.Rest)
  GOOGLE_DCHECK_NE(&from, this);
  const Rest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localsolver_vrp.Rest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localsolver_vrp.Rest)
    MergeFrom(*source);
  }
}

void Rest::MergeFrom(const Rest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localsolver_vrp.Rest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_time_window()) {
    _internal_mutable_time_window()->::localsolver_vrp::TimeWindow::MergeFrom(from._internal_time_window());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (!(from.late_multiplier() <= 0 && from.late_multiplier() >= 0)) {
    _internal_set_late_multiplier(from._internal_late_multiplier());
  }
  if (!(from.exclusion_cost() <= 0 && from.exclusion_cost() >= 0)) {
    _internal_set_exclusion_cost(from._internal_exclusion_cost());
  }
}

void Rest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localsolver_vrp.Rest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rest::CopyFrom(const Rest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localsolver_vrp.Rest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rest::IsInitialized() const {
  return true;
}

void Rest::InternalSwap(Rest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rest, exclusion_cost_)
      + sizeof(Rest::exclusion_cost_)
      - PROTOBUF_FIELD_OFFSET(Rest, time_window_)>(
          reinterpret_cast<char*>(&time_window_),
          reinterpret_cast<char*>(&other->time_window_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Capacity::InitAsDefaultInstance() {
}
class Capacity::_Internal {
 public:
};

Capacity::Capacity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:localsolver_vrp.Capacity)
}
Capacity::Capacity(const Capacity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_load_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(initial_load_));
  // @@protoc_insertion_point(copy_constructor:localsolver_vrp.Capacity)
}

void Capacity::SharedCtor() {
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_load_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(initial_load_));
}

Capacity::~Capacity() {
  // @@protoc_insertion_point(destructor:localsolver_vrp.Capacity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Capacity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Capacity::ArenaDtor(void* object) {
  Capacity* _this = reinterpret_cast< Capacity* >(object);
  (void)_this;
}
void Capacity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Capacity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Capacity& Capacity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Capacity_localsolver_5fvrp_2eproto.base);
  return *internal_default_instance();
}


void Capacity::Clear() {
// @@protoc_insertion_point(message_clear_start:localsolver_vrp.Capacity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_load_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(initial_load_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capacity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float overload_multiplier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          overload_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool counting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          counting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float initial_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          initial_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float initial_load = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          initial_load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Capacity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localsolver_vrp.Capacity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float limit = 1;
  if (!(this->limit() <= 0 && this->limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_limit(), target);
  }

  // float overload_multiplier = 2;
  if (!(this->overload_multiplier() <= 0 && this->overload_multiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_overload_multiplier(), target);
  }

  // bool counting = 3;
  if (this->counting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_counting(), target);
  }

  // float initial_limit = 4;
  if (!(this->initial_limit() <= 0 && this->initial_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_initial_limit(), target);
  }

  // float initial_load = 5;
  if (!(this->initial_load() <= 0 && this->initial_load() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_initial_load(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localsolver_vrp.Capacity)
  return target;
}

size_t Capacity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localsolver_vrp.Capacity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float limit = 1;
  if (!(this->limit() <= 0 && this->limit() >= 0)) {
    total_size += 1 + 4;
  }

  // float overload_multiplier = 2;
  if (!(this->overload_multiplier() <= 0 && this->overload_multiplier() >= 0)) {
    total_size += 1 + 4;
  }

  // bool counting = 3;
  if (this->counting() != 0) {
    total_size += 1 + 1;
  }

  // float initial_limit = 4;
  if (!(this->initial_limit() <= 0 && this->initial_limit() >= 0)) {
    total_size += 1 + 4;
  }

  // float initial_load = 5;
  if (!(this->initial_load() <= 0 && this->initial_load() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Capacity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localsolver_vrp.Capacity)
  GOOGLE_DCHECK_NE(&from, this);
  const Capacity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Capacity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localsolver_vrp.Capacity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localsolver_vrp.Capacity)
    MergeFrom(*source);
  }
}

void Capacity::MergeFrom(const Capacity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localsolver_vrp.Capacity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.limit() <= 0 && from.limit() >= 0)) {
    _internal_set_limit(from._internal_limit());
  }
  if (!(from.overload_multiplier() <= 0 && from.overload_multiplier() >= 0)) {
    _internal_set_overload_multiplier(from._internal_overload_multiplier());
  }
  if (from.counting() != 0) {
    _internal_set_counting(from._internal_counting());
  }
  if (!(from.initial_limit() <= 0 && from.initial_limit() >= 0)) {
    _internal_set_initial_limit(from._internal_initial_limit());
  }
  if (!(from.initial_load() <= 0 && from.initial_load() >= 0)) {
    _internal_set_initial_load(from._internal_initial_load());
  }
}

void Capacity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localsolver_vrp.Capacity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capacity::CopyFrom(const Capacity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localsolver_vrp.Capacity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capacity::IsInitialized() const {
  return true;
}

void Capacity::InternalSwap(Capacity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Capacity, initial_load_)
      + sizeof(Capacity::initial_load_)
      - PROTOBUF_FIELD_OFFSET(Capacity, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Capacity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle::InitAsDefaultInstance() {
  ::localsolver_vrp::_Vehicle_default_instance_._instance.get_mutable()->time_window_ = const_cast< ::localsolver_vrp::TimeWindow*>(
      ::localsolver_vrp::TimeWindow::internal_default_instance());
}
class Vehicle::_Internal {
 public:
  static const ::localsolver_vrp::TimeWindow& time_window(const Vehicle* msg);
};

const ::localsolver_vrp::TimeWindow&
Vehicle::_Internal::time_window(const Vehicle* msg) {
  return *msg->time_window_;
}
Vehicle::Vehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  capacities_(arena),
  rests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:localsolver_vrp.Vehicle)
}
Vehicle::Vehicle(const Vehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      capacities_(from.capacities_),
      rests_(from.rests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  shift_preference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shift_preference().empty()) {
    shift_preference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shift_preference(),
      GetArena());
  }
  if (from._internal_has_time_window()) {
    time_window_ = new ::localsolver_vrp::TimeWindow(*from.time_window_);
  } else {
    time_window_ = nullptr;
  }
  ::memcpy(&cost_fixed_, &from.cost_fixed_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_return_) -
    reinterpret_cast<char*>(&cost_fixed_)) + sizeof(free_return_));
  // @@protoc_insertion_point(copy_constructor:localsolver_vrp.Vehicle)
}

void Vehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vehicle_localsolver_5fvrp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shift_preference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_return_) -
      reinterpret_cast<char*>(&time_window_)) + sizeof(free_return_));
}

Vehicle::~Vehicle() {
  // @@protoc_insertion_point(destructor:localsolver_vrp.Vehicle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vehicle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shift_preference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_window_;
}

void Vehicle::ArenaDtor(void* object) {
  Vehicle* _this = reinterpret_cast< Vehicle* >(object);
  (void)_this;
}
void Vehicle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle& Vehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_localsolver_5fvrp_2eproto.base);
  return *internal_default_instance();
}


void Vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:localsolver_vrp.Vehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capacities_.Clear();
  rests_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shift_preference_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && time_window_ != nullptr) {
    delete time_window_;
  }
  time_window_ = nullptr;
  ::memset(&cost_fixed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_return_) -
      reinterpret_cast<char*>(&cost_fixed_)) + sizeof(free_return_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localsolver_vrp.Vehicle.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .localsolver_vrp.Capacity capacities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_capacities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .localsolver_vrp.TimeWindow time_window = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_window(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .localsolver_vrp.Rest rests = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // float cost_fixed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          cost_fixed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cost_distance_multiplier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          cost_distance_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cost_time_multiplier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          cost_time_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cost_waiting_time_multiplier = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          cost_waiting_time_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 matrix_index = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          matrix_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 start_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 end_index = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          end_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shift_preference = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_shift_preference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localsolver_vrp.Vehicle.shift_preference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cost_late_multiplier = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          cost_late_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 day_index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          day_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 value_matrix_index = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          value_matrix_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cost_value_multiplier = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          cost_value_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 max_ride_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          max_ride_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_ride_distance = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          max_ride_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 distance = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float coef_service = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          coef_service_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float coef_setup = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          coef_setup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 additional_service = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          additional_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 additional_setup = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          additional_setup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool free_approach = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          free_approach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool free_return = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          free_return_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localsolver_vrp.Vehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localsolver_vrp.Vehicle.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .localsolver_vrp.Capacity capacities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_capacities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_capacities(i), target, stream);
  }

  // .localsolver_vrp.TimeWindow time_window = 4;
  if (this->has_time_window()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::time_window(this), target, stream);
  }

  // repeated .localsolver_vrp.Rest rests = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_rests(i), target, stream);
  }

  // float cost_fixed = 6;
  if (!(this->cost_fixed() <= 0 && this->cost_fixed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_cost_fixed(), target);
  }

  // float cost_distance_multiplier = 7;
  if (!(this->cost_distance_multiplier() <= 0 && this->cost_distance_multiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_cost_distance_multiplier(), target);
  }

  // float cost_time_multiplier = 8;
  if (!(this->cost_time_multiplier() <= 0 && this->cost_time_multiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_cost_time_multiplier(), target);
  }

  // float cost_waiting_time_multiplier = 9;
  if (!(this->cost_waiting_time_multiplier() <= 0 && this->cost_waiting_time_multiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_cost_waiting_time_multiplier(), target);
  }

  // uint32 matrix_index = 10;
  if (this->matrix_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_matrix_index(), target);
  }

  // sint32 start_index = 11;
  if (this->start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(11, this->_internal_start_index(), target);
  }

  // sint32 end_index = 12;
  if (this->end_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(12, this->_internal_end_index(), target);
  }

  // uint32 duration = 13;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_duration(), target);
  }

  // string shift_preference = 14;
  if (this->shift_preference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shift_preference().data(), static_cast<int>(this->_internal_shift_preference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localsolver_vrp.Vehicle.shift_preference");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_shift_preference(), target);
  }

  // float cost_late_multiplier = 15;
  if (!(this->cost_late_multiplier() <= 0 && this->cost_late_multiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_cost_late_multiplier(), target);
  }

  // sint32 day_index = 16;
  if (this->day_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(16, this->_internal_day_index(), target);
  }

  // uint32 value_matrix_index = 17;
  if (this->value_matrix_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_value_matrix_index(), target);
  }

  // float cost_value_multiplier = 18;
  if (!(this->cost_value_multiplier() <= 0 && this->cost_value_multiplier() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_cost_value_multiplier(), target);
  }

  // uint32 max_ride_time = 19;
  if (this->max_ride_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_max_ride_time(), target);
  }

  // uint32 max_ride_distance = 20;
  if (this->max_ride_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_max_ride_distance(), target);
  }

  // uint32 distance = 22;
  if (this->distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_distance(), target);
  }

  // float coef_service = 23;
  if (!(this->coef_service() <= 0 && this->coef_service() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_coef_service(), target);
  }

  // float coef_setup = 24;
  if (!(this->coef_setup() <= 0 && this->coef_setup() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_coef_setup(), target);
  }

  // uint32 additional_service = 25;
  if (this->additional_service() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_additional_service(), target);
  }

  // uint32 additional_setup = 26;
  if (this->additional_setup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_additional_setup(), target);
  }

  // bool free_approach = 27;
  if (this->free_approach() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_free_approach(), target);
  }

  // bool free_return = 28;
  if (this->free_return() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_free_return(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localsolver_vrp.Vehicle)
  return target;
}

size_t Vehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localsolver_vrp.Vehicle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .localsolver_vrp.Capacity capacities = 3;
  total_size += 1UL * this->_internal_capacities_size();
  for (const auto& msg : this->capacities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .localsolver_vrp.Rest rests = 5;
  total_size += 1UL * this->_internal_rests_size();
  for (const auto& msg : this->rests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string shift_preference = 14;
  if (this->shift_preference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shift_preference());
  }

  // .localsolver_vrp.TimeWindow time_window = 4;
  if (this->has_time_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_window_);
  }

  // float cost_fixed = 6;
  if (!(this->cost_fixed() <= 0 && this->cost_fixed() >= 0)) {
    total_size += 1 + 4;
  }

  // float cost_distance_multiplier = 7;
  if (!(this->cost_distance_multiplier() <= 0 && this->cost_distance_multiplier() >= 0)) {
    total_size += 1 + 4;
  }

  // float cost_time_multiplier = 8;
  if (!(this->cost_time_multiplier() <= 0 && this->cost_time_multiplier() >= 0)) {
    total_size += 1 + 4;
  }

  // float cost_waiting_time_multiplier = 9;
  if (!(this->cost_waiting_time_multiplier() <= 0 && this->cost_waiting_time_multiplier() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 matrix_index = 10;
  if (this->matrix_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_matrix_index());
  }

  // sint32 start_index = 11;
  if (this->start_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_start_index());
  }

  // sint32 end_index = 12;
  if (this->end_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_end_index());
  }

  // uint32 duration = 13;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  // float cost_late_multiplier = 15;
  if (!(this->cost_late_multiplier() <= 0 && this->cost_late_multiplier() >= 0)) {
    total_size += 1 + 4;
  }

  // sint32 day_index = 16;
  if (this->day_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_day_index());
  }

  // uint32 value_matrix_index = 17;
  if (this->value_matrix_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value_matrix_index());
  }

  // float cost_value_multiplier = 18;
  if (!(this->cost_value_multiplier() <= 0 && this->cost_value_multiplier() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 max_ride_time = 19;
  if (this->max_ride_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_ride_time());
  }

  // uint32 max_ride_distance = 20;
  if (this->max_ride_distance() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_ride_distance());
  }

  // uint32 distance = 22;
  if (this->distance() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_distance());
  }

  // float coef_service = 23;
  if (!(this->coef_service() <= 0 && this->coef_service() >= 0)) {
    total_size += 2 + 4;
  }

  // float coef_setup = 24;
  if (!(this->coef_setup() <= 0 && this->coef_setup() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 additional_service = 25;
  if (this->additional_service() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_additional_service());
  }

  // uint32 additional_setup = 26;
  if (this->additional_setup() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_additional_setup());
  }

  // bool free_approach = 27;
  if (this->free_approach() != 0) {
    total_size += 2 + 1;
  }

  // bool free_return = 28;
  if (this->free_return() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localsolver_vrp.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localsolver_vrp.Vehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localsolver_vrp.Vehicle)
    MergeFrom(*source);
  }
}

void Vehicle::MergeFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localsolver_vrp.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capacities_.MergeFrom(from.capacities_);
  rests_.MergeFrom(from.rests_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.shift_preference().size() > 0) {
    _internal_set_shift_preference(from._internal_shift_preference());
  }
  if (from.has_time_window()) {
    _internal_mutable_time_window()->::localsolver_vrp::TimeWindow::MergeFrom(from._internal_time_window());
  }
  if (!(from.cost_fixed() <= 0 && from.cost_fixed() >= 0)) {
    _internal_set_cost_fixed(from._internal_cost_fixed());
  }
  if (!(from.cost_distance_multiplier() <= 0 && from.cost_distance_multiplier() >= 0)) {
    _internal_set_cost_distance_multiplier(from._internal_cost_distance_multiplier());
  }
  if (!(from.cost_time_multiplier() <= 0 && from.cost_time_multiplier() >= 0)) {
    _internal_set_cost_time_multiplier(from._internal_cost_time_multiplier());
  }
  if (!(from.cost_waiting_time_multiplier() <= 0 && from.cost_waiting_time_multiplier() >= 0)) {
    _internal_set_cost_waiting_time_multiplier(from._internal_cost_waiting_time_multiplier());
  }
  if (from.matrix_index() != 0) {
    _internal_set_matrix_index(from._internal_matrix_index());
  }
  if (from.start_index() != 0) {
    _internal_set_start_index(from._internal_start_index());
  }
  if (from.end_index() != 0) {
    _internal_set_end_index(from._internal_end_index());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (!(from.cost_late_multiplier() <= 0 && from.cost_late_multiplier() >= 0)) {
    _internal_set_cost_late_multiplier(from._internal_cost_late_multiplier());
  }
  if (from.day_index() != 0) {
    _internal_set_day_index(from._internal_day_index());
  }
  if (from.value_matrix_index() != 0) {
    _internal_set_value_matrix_index(from._internal_value_matrix_index());
  }
  if (!(from.cost_value_multiplier() <= 0 && from.cost_value_multiplier() >= 0)) {
    _internal_set_cost_value_multiplier(from._internal_cost_value_multiplier());
  }
  if (from.max_ride_time() != 0) {
    _internal_set_max_ride_time(from._internal_max_ride_time());
  }
  if (from.max_ride_distance() != 0) {
    _internal_set_max_ride_distance(from._internal_max_ride_distance());
  }
  if (from.distance() != 0) {
    _internal_set_distance(from._internal_distance());
  }
  if (!(from.coef_service() <= 0 && from.coef_service() >= 0)) {
    _internal_set_coef_service(from._internal_coef_service());
  }
  if (!(from.coef_setup() <= 0 && from.coef_setup() >= 0)) {
    _internal_set_coef_setup(from._internal_coef_setup());
  }
  if (from.additional_service() != 0) {
    _internal_set_additional_service(from._internal_additional_service());
  }
  if (from.additional_setup() != 0) {
    _internal_set_additional_setup(from._internal_additional_setup());
  }
  if (from.free_approach() != 0) {
    _internal_set_free_approach(from._internal_free_approach());
  }
  if (from.free_return() != 0) {
    _internal_set_free_return(from._internal_free_return());
  }
}

void Vehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localsolver_vrp.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle::CopyFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localsolver_vrp.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle::IsInitialized() const {
  return true;
}

void Vehicle::InternalSwap(Vehicle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  capacities_.InternalSwap(&other->capacities_);
  rests_.InternalSwap(&other->rests_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shift_preference_.Swap(&other->shift_preference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vehicle, free_return_)
      + sizeof(Vehicle::free_return_)
      - PROTOBUF_FIELD_OFFSET(Vehicle, time_window_)>(
          reinterpret_cast<char*>(&time_window_),
          reinterpret_cast<char*>(&other->time_window_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Relation::InitAsDefaultInstance() {
}
class Relation::_Internal {
 public:
};

Relation::Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  linked_ids_(arena),
  linked_vehicle_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:localsolver_vrp.Relation)
}
Relation::Relation(const Relation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      linked_ids_(from.linked_ids_),
      linked_vehicle_ids_(from.linked_vehicle_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  lapse_ = from.lapse_;
  // @@protoc_insertion_point(copy_constructor:localsolver_vrp.Relation)
}

void Relation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Relation_localsolver_5fvrp_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lapse_ = 0u;
}

Relation::~Relation() {
  // @@protoc_insertion_point(destructor:localsolver_vrp.Relation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Relation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Relation::ArenaDtor(void* object) {
  Relation* _this = reinterpret_cast< Relation* >(object);
  (void)_this;
}
void Relation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Relation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Relation& Relation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Relation_localsolver_5fvrp_2eproto.base);
  return *internal_default_instance();
}


void Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:localsolver_vrp.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linked_ids_.Clear();
  linked_vehicle_ids_.Clear();
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lapse_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Relation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localsolver_vrp.Relation.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string linked_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_linked_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localsolver_vrp.Relation.linked_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 lapse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lapse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string linked_vehicle_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_linked_vehicle_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localsolver_vrp.Relation.linked_vehicle_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Relation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localsolver_vrp.Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localsolver_vrp.Relation.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated string linked_ids = 2;
  for (int i = 0, n = this->_internal_linked_ids_size(); i < n; i++) {
    const auto& s = this->_internal_linked_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localsolver_vrp.Relation.linked_ids");
    target = stream->WriteString(2, s, target);
  }

  // uint32 lapse = 3;
  if (this->lapse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lapse(), target);
  }

  // repeated string linked_vehicle_ids = 4;
  for (int i = 0, n = this->_internal_linked_vehicle_ids_size(); i < n; i++) {
    const auto& s = this->_internal_linked_vehicle_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localsolver_vrp.Relation.linked_vehicle_ids");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localsolver_vrp.Relation)
  return target;
}

size_t Relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localsolver_vrp.Relation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string linked_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(linked_ids_.size());
  for (int i = 0, n = linked_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      linked_ids_.Get(i));
  }

  // repeated string linked_vehicle_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(linked_vehicle_ids_.size());
  for (int i = 0, n = linked_vehicle_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      linked_vehicle_ids_.Get(i));
  }

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint32 lapse = 3;
  if (this->lapse() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lapse());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Relation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localsolver_vrp.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  const Relation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Relation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localsolver_vrp.Relation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localsolver_vrp.Relation)
    MergeFrom(*source);
  }
}

void Relation::MergeFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localsolver_vrp.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linked_ids_.MergeFrom(from.linked_ids_);
  linked_vehicle_ids_.MergeFrom(from.linked_vehicle_ids_);
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.lapse() != 0) {
    _internal_set_lapse(from._internal_lapse());
  }
}

void Relation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localsolver_vrp.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localsolver_vrp.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {
  return true;
}

void Relation::InternalSwap(Relation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  linked_ids_.InternalSwap(&other->linked_ids_);
  linked_vehicle_ids_.InternalSwap(&other->linked_vehicle_ids_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lapse_, other->lapse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Relation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Route::InitAsDefaultInstance() {
}
class Route::_Internal {
 public:
};

Route::Route(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  service_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:localsolver_vrp.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      service_ids_(from.service_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vehicle_id().empty()) {
    vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vehicle_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:localsolver_vrp.Route)
}

void Route::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Route_localsolver_5fvrp_2eproto.base);
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:localsolver_vrp.Route)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Route::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vehicle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Route::ArenaDtor(void* object) {
  Route* _this = reinterpret_cast< Route* >(object);
  (void)_this;
}
void Route::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Route& Route::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Route_localsolver_5fvrp_2eproto.base);
  return *internal_default_instance();
}


void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:localsolver_vrp.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_ids_.Clear();
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vehicle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vehicle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localsolver_vrp.Route.vehicle_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string service_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_service_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localsolver_vrp.Route.service_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Route::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localsolver_vrp.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vehicle_id = 1;
  if (this->vehicle_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicle_id().data(), static_cast<int>(this->_internal_vehicle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localsolver_vrp.Route.vehicle_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vehicle_id(), target);
  }

  // repeated string service_ids = 2;
  for (int i = 0, n = this->_internal_service_ids_size(); i < n; i++) {
    const auto& s = this->_internal_service_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localsolver_vrp.Route.service_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localsolver_vrp.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localsolver_vrp.Route)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string service_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(service_ids_.size());
  for (int i = 0, n = service_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      service_ids_.Get(i));
  }

  // string vehicle_id = 1;
  if (this->vehicle_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Route::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localsolver_vrp.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const Route* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Route>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localsolver_vrp.Route)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localsolver_vrp.Route)
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localsolver_vrp.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_ids_.MergeFrom(from.service_ids_);
  if (from.vehicle_id().size() > 0) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
}

void Route::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localsolver_vrp.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localsolver_vrp.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_ids_.InternalSwap(&other->service_ids_);
  vehicle_id_.Swap(&other->vehicle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Problem::InitAsDefaultInstance() {
}
class Problem::_Internal {
 public:
};

Problem::Problem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vehicles_(arena),
  services_(arena),
  matrices_(arena),
  relations_(arena),
  routes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:localsolver_vrp.Problem)
}
Problem::Problem(const Problem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vehicles_(from.vehicles_),
      services_(from.services_),
      matrices_(from.matrices_),
      relations_(from.relations_),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:localsolver_vrp.Problem)
}

void Problem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Problem_localsolver_5fvrp_2eproto.base);
}

Problem::~Problem() {
  // @@protoc_insertion_point(destructor:localsolver_vrp.Problem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Problem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Problem::ArenaDtor(void* object) {
  Problem* _this = reinterpret_cast< Problem* >(object);
  (void)_this;
}
void Problem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Problem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Problem& Problem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Problem_localsolver_5fvrp_2eproto.base);
  return *internal_default_instance();
}


void Problem::Clear() {
// @@protoc_insertion_point(message_clear_start:localsolver_vrp.Problem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicles_.Clear();
  services_.Clear();
  matrices_.Clear();
  relations_.Clear();
  routes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Problem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .localsolver_vrp.Vehicle vehicles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehicles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .localsolver_vrp.Service services = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .localsolver_vrp.Matrix matrices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matrices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .localsolver_vrp.Relation relations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .localsolver_vrp.Route routes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Problem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localsolver_vrp.Problem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .localsolver_vrp.Vehicle vehicles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vehicles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vehicles(i), target, stream);
  }

  // repeated .localsolver_vrp.Service services = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_services_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_services(i), target, stream);
  }

  // repeated .localsolver_vrp.Matrix matrices = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matrices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_matrices(i), target, stream);
  }

  // repeated .localsolver_vrp.Relation relations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_relations(i), target, stream);
  }

  // repeated .localsolver_vrp.Route routes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_routes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localsolver_vrp.Problem)
  return target;
}

size_t Problem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localsolver_vrp.Problem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .localsolver_vrp.Vehicle vehicles = 3;
  total_size += 1UL * this->_internal_vehicles_size();
  for (const auto& msg : this->vehicles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .localsolver_vrp.Service services = 4;
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .localsolver_vrp.Matrix matrices = 5;
  total_size += 1UL * this->_internal_matrices_size();
  for (const auto& msg : this->matrices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .localsolver_vrp.Relation relations = 6;
  total_size += 1UL * this->_internal_relations_size();
  for (const auto& msg : this->relations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .localsolver_vrp.Route routes = 7;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Problem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localsolver_vrp.Problem)
  GOOGLE_DCHECK_NE(&from, this);
  const Problem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Problem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localsolver_vrp.Problem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localsolver_vrp.Problem)
    MergeFrom(*source);
  }
}

void Problem::MergeFrom(const Problem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localsolver_vrp.Problem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicles_.MergeFrom(from.vehicles_);
  services_.MergeFrom(from.services_);
  matrices_.MergeFrom(from.matrices_);
  relations_.MergeFrom(from.relations_);
  routes_.MergeFrom(from.routes_);
}

void Problem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localsolver_vrp.Problem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Problem::CopyFrom(const Problem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localsolver_vrp.Problem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Problem::IsInitialized() const {
  return true;
}

void Problem::InternalSwap(Problem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vehicles_.InternalSwap(&other->vehicles_);
  services_.InternalSwap(&other->services_);
  matrices_.InternalSwap(&other->matrices_);
  relations_.InternalSwap(&other->relations_);
  routes_.InternalSwap(&other->routes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Problem::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace localsolver_vrp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::localsolver_vrp::Matrix* Arena::CreateMaybeMessage< ::localsolver_vrp::Matrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::localsolver_vrp::Matrix >(arena);
}
template<> PROTOBUF_NOINLINE ::localsolver_vrp::TimeWindow* Arena::CreateMaybeMessage< ::localsolver_vrp::TimeWindow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::localsolver_vrp::TimeWindow >(arena);
}
template<> PROTOBUF_NOINLINE ::localsolver_vrp::Service* Arena::CreateMaybeMessage< ::localsolver_vrp::Service >(Arena* arena) {
  return Arena::CreateMessageInternal< ::localsolver_vrp::Service >(arena);
}
template<> PROTOBUF_NOINLINE ::localsolver_vrp::Rest* Arena::CreateMaybeMessage< ::localsolver_vrp::Rest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::localsolver_vrp::Rest >(arena);
}
template<> PROTOBUF_NOINLINE ::localsolver_vrp::Capacity* Arena::CreateMaybeMessage< ::localsolver_vrp::Capacity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::localsolver_vrp::Capacity >(arena);
}
template<> PROTOBUF_NOINLINE ::localsolver_vrp::Vehicle* Arena::CreateMaybeMessage< ::localsolver_vrp::Vehicle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::localsolver_vrp::Vehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::localsolver_vrp::Relation* Arena::CreateMaybeMessage< ::localsolver_vrp::Relation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::localsolver_vrp::Relation >(arena);
}
template<> PROTOBUF_NOINLINE ::localsolver_vrp::Route* Arena::CreateMaybeMessage< ::localsolver_vrp::Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::localsolver_vrp::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::localsolver_vrp::Problem* Arena::CreateMaybeMessage< ::localsolver_vrp::Problem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::localsolver_vrp::Problem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
